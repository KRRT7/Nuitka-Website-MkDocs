{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Tip</p> <p>Get started quickly with the installation guide.</p> <p>Check the documentation for advanced features.</p>"},{"location":"#welcome","title":"Welcome","text":"<p>Welcome to Nuitka - the Python compiler that creates fast executables.</p> <p>Get Started Download</p> <ul> <li> <p> IP Protection</p> <p>Compile your source code for security and protect your intellectual property.</p> </li> <li> <p> Performance</p> <p>Boost your program runtime and launch performance significantly.</p> </li> <li> <p> Deployment</p> <p>Hassle-free Python deployment with standalone distributions.</p> </li> </ul>"},{"location":"#what-is-nuitka","title":"What is Nuitka?","text":"<p>Nuitka is the optimizing Python compiler written in Python that creates executables that run without a separate installer. Data files can both be included or put alongside.</p> <p>Build fast, secure, and deployable Python applications with a simple compilation process. Run your Python code as native executables!</p> <ul> <li> <p> Cross Platform</p> <p>Nuitka works on Windows, macOS, Linux, and more - wherever Python runs.</p> </li> <li> <p> Python Compatible</p> <p>Fully compatible with Python 2.6-2.7 and Python 3.4-3.13.</p> </li> <li> <p> Open Source</p> <p>Nuitka is licensed under Apache License 2.0.</p> </li> </ul>"},{"location":"api-doc/","title":"API Documentation","text":"<p>This document provides API documentation for Nuitka's internal interfaces and plugin system.</p>"},{"location":"api-doc/#plugin-api","title":"Plugin API","text":"<p>Nuitka provides a plugin system that allows extending compilation behavior.</p>"},{"location":"api-doc/#base-plugin-class","title":"Base Plugin Class","text":"<pre><code>class NuitkaPlugin:\n    \"\"\"Base class for Nuitka plugins.\"\"\"\n\n    def onModuleDiscovered(self, module):\n        \"\"\"Called when a module is discovered during compilation.\"\"\"\n        pass\n\n    def considerExtraDlls(self, dist_dir, module):\n        \"\"\"Consider additional DLLs for a module.\"\"\"\n        return []\n</code></pre>"},{"location":"api-doc/#creating-plugins","title":"Creating Plugins","text":"<p>To create a plugin:</p> <ol> <li>Inherit from <code>NuitkaPlugin</code></li> <li>Override relevant methods</li> <li>Register the plugin</li> </ol>"},{"location":"api-doc/#examples","title":"Examples","text":"<p>Example plugins can be found in the Nuitka source code under the <code>nuitka/plugins/</code> directory.</p>"},{"location":"api-doc/#internal-apis","title":"Internal APIs","text":"<p>Warning</p> <p>Internal APIs are subject to change without notice. Use at your own risk.</p>"},{"location":"api-doc/#code-generation","title":"Code Generation","text":"<p>The code generation system provides interfaces for:</p> <ul> <li>AST transformation</li> <li>Code emission</li> <li>Optimization passes</li> </ul>"},{"location":"api-doc/#type-system","title":"Type System","text":"<p>Nuitka's type system includes:</p> <ul> <li>Type shapes</li> <li>Value ranges</li> <li>Constraint propagation</li> </ul>"},{"location":"blog/","title":"Nuitka Blog","text":"<p>Welcome to the Nuitka Blog, where we share updates, insights, and technical deep-dives about the Python compiler Nuitka.</p> <p>Stay Updated</p> <p>Follow our blog for the latest developments, release announcements, technical articles, and community updates.</p>"},{"location":"blog/#recent-posts","title":"Recent Posts","text":""},{"location":"blog/#featured-posts","title":"Featured Posts","text":"All in with NuitkaNuitka Release 2.7Package Configuration <p>December 9, 2022</p> <p>After more than 10 years of working on the Python compiler Nuitka, and at the age of 50, Kay Hayen has finally decided to take the plunge and make Nuitka his day job.</p> <p>Read More</p> <p>May 30, 2025</p> <p>The latest stable release of Nuitka adds a ton of new features and corrections, including improved compatibility and performance enhancements.</p> <p>Read More</p> <p>Ongoing Series</p> <p>Learn about Nuitka Package Configuration - a powerful way to extend Nuitka with tweaks for packages, making integration simpler than ever.</p> <p>Learn More</p>"},{"location":"blog/#categories","title":"Categories","text":""},{"location":"blog/#release-announcements","title":"Release Announcements","text":"<p>Stay up-to-date with the latest Nuitka releases, including new features, bug fixes, and performance improvements.</p>"},{"location":"blog/#technical-deep-dives","title":"Technical Deep-Dives","text":"<p>Detailed technical articles explaining Nuitka internals, optimization techniques, and advanced usage patterns.</p>"},{"location":"blog/#community-updates","title":"Community Updates","text":"<p>News about the Nuitka community, contributions, streaming sessions, and events.</p>"},{"location":"blog/#package-configuration","title":"Package Configuration","text":"<p>Articles about extending Nuitka compatibility with new packages and tweaking existing ones.</p>"},{"location":"blog/#streaming-and-live-development","title":"Streaming and Live Development","text":"<p>Nuitka development streams happen regularly where you can watch live development, ask questions, and learn about the internals.</p> <ul> <li>Platform: YouTube and Discord</li> <li>Schedule: Usually weekends (announced on Twitter and Discord)</li> <li>Format: Live coding sessions with interactive Q&amp;A</li> </ul> <p>Learn More About Streaming</p>"},{"location":"blog/#subscribe-for-updates","title":"Subscribe for Updates","text":"<p>Stay informed about new blog posts and Nuitka developments:</p> <ul> <li>Follow on Twitter</li> <li>Join Discord</li> <li>GitHub Releases</li> </ul>"},{"location":"blog/#archive","title":"Archive","text":"<p>Looking for older posts? Browse our complete archive:</p> <ul> <li>Release History</li> <li>All In With Nuitka</li> <li>Nuitka Release 2.7</li> </ul> <p>Contributing</p> <p>Interested in writing a guest post or contributing to the blog? Get in touch through our support channels or join our Discord community.</p>"},{"location":"changelog/","title":"Release Information","text":"<p>This page provides comprehensive information about Nuitka releases, including current changes, roadmap, and version history.</p> <p>Stay Current</p> <p>Keep track of the latest Nuitka developments, bug fixes, and new features across all release versions.</p>"},{"location":"changelog/#overview","title":"Overview","text":"RoadmapCurrent ReleaseNext Release <p>Future Planning</p> <p>This is the roadmap of Nuitka, where we want to be in the next couple of releases.</p> <p>View Roadmap</p> <p>Version 2.7 (Latest)</p> <p>Read about changes from the current release of Nuitka with all the latest features and improvements.</p> <p>View Current Release</p> <p>Upcoming Changes</p> <p>Read about changes for the upcoming release, which also includes hotfix information for the current release.</p> <p>View Upcoming Changes</p>"},{"location":"changelog/#release-series","title":"Release Series","text":""},{"location":"changelog/#version-2x-series","title":"Version 2.x Series","text":"<p>The current major release series with the latest features and improvements.</p> <p>View 2.x Changelog</p>"},{"location":"changelog/#version-1x-series","title":"Version 1.x Series","text":"<p>Changes for the 1.x major release series - the previous stable series.</p> <p>View 1.x Changelog</p>"},{"location":"changelog/#version-0x-series","title":"Version 0.x Series","text":"<p>Historical changes for the 0.x major release series - the original development series.</p> <p>View 0.x Changelog</p>"},{"location":"changelog/#latest-release-highlights","title":"Latest Release Highlights","text":""},{"location":"changelog/#nuitka-release-27","title":"Nuitka Release 2.7","text":"<p>This release adds a ton of new features and corrections, including:</p>"},{"location":"changelog/#major-bug-fixes","title":"Major Bug Fixes","text":"<ul> <li>macOS: Correctly recognize self-dependencies of DLLs with architecture suffix</li> <li>Standalone: Resolved <code>.pyi</code> file detection and parsing issues</li> <li>Windows: Fixed console mode attachment and MSVC compilation issues</li> <li>Python 3.12+: Improved type alias compatibility and extension module context handling</li> </ul>"},{"location":"changelog/#new-features","title":"New Features","text":"<ul> <li>Enhanced compatibility with newer Python versions</li> <li>Improved standalone distribution handling</li> <li>Better DLL dependency resolution</li> <li>Enhanced package configuration support</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Optimized compilation processes</li> <li>Better memory management</li> <li>Faster startup times for compiled applications</li> </ul> <p>View Full Release Notes</p>"},{"location":"changelog/#quick-navigation","title":"Quick Navigation","text":"Version Release Date Key Features 2.7 May 2025 Enhanced compatibility, bug fixes 2.6 Previous Stability improvements 2.5 Earlier Performance enhancements 2.0 Major Python 3.11+ support"},{"location":"changelog/#download-current-release","title":"Download Current Release","text":"<p>Ready to try the latest version?</p> <p>Download Nuitka 2.7</p>"},{"location":"changelog/#release-tracking","title":"Release Tracking","text":"<p>Stay informed about new releases:</p> <ul> <li>GitHub Releases - Official release announcements</li> <li>Twitter Updates - Quick release notifications  </li> <li>Discord Community - Community discussions about releases</li> </ul>"},{"location":"changelog/#whats-in-a-release","title":"What's in a Release?","text":"<p>Each Nuitka release typically includes:</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Platform-specific fixes (Windows, macOS, Linux)</li> <li>Python version compatibility improvements</li> <li>Standalone distribution corrections</li> <li>Plugin and package compatibility fixes</li> </ul>"},{"location":"changelog/#new-features_1","title":"New Features","text":"<ul> <li>Enhanced compilation options</li> <li>Improved package support</li> <li>New optimization techniques</li> <li>Extended platform support</li> </ul>"},{"location":"changelog/#performance-improvements_1","title":"Performance Improvements","text":"<ul> <li>Faster compilation times</li> <li>Better runtime performance</li> <li>Memory usage optimizations</li> <li>Startup time improvements</li> </ul>"},{"location":"changelog/#developer-experience","title":"Developer Experience","text":"<ul> <li>Better error messages</li> <li>Enhanced debugging support</li> <li>Improved documentation</li> <li>New configuration options</li> </ul> <p>Release Schedule</p> <p>Nuitka follows a regular release schedule with frequent updates. Major releases introduce new features, while minor releases focus on bug fixes and stability improvements.</p>"},{"location":"commercial/","title":"Nuitka Commercial","text":"<p>As a commercial user of Python, you need these critical features that only Nuitka Commercial offers. Protect your code, data, outputs, and tracebacks while still enjoying major convenience features for your application.</p> <p>Commercial Benefits</p> <p>Nuitka Commercial provides advanced protection features essential for enterprise deployment while funding ongoing development of the free Nuitka project.</p>"},{"location":"commercial/#protection-vs-reverse-engineering","title":"Protection vs. Reverse Engineering","text":"<p>Hiding your source code and contained keys is crucial to your IP protection. For this, you need the Nuitka Commercial package. It includes plugins that achieve the following:</p>"},{"location":"commercial/#protect-constants-data","title":"Protect Constants Data","text":"<p>Obfuscate contained program constants data</p> <p>Your encryption keys, your program texts, your library usages, all expose textual information that can be valuable input in Reverse Engineering.</p> <p>With Nuitka, these constants are plain and readable in the compiled programs, just like in your Python source code or its bytecode.</p> <p>Compiling with Nuitka protects the source code, but with the data still being easily readable, it will be less effective than Nuitka Commercial, which goes all the way.</p>"},{"location":"commercial/#protect-data-files","title":"Protect Data Files","text":"<p>Another aspect of data protection is your data files. When your program includes data files to work with, these have to be visible in the file system. These files unnecessarily expose your program to risks. For example, via QML files of Qt, your program behavior can be changed by an attacker modifying these files, or they can copy their content easily.</p> <p>Therefore, Nuitka Commercial allows you to embed data files as part of the program constants and protect them that way. Without these files, the attacker cannot use them as an attack vector.</p>"},{"location":"commercial/#protect-dll-files","title":"Protect DLL Files","text":"<p>For best protection of your program at runtime, you need to make sure that DLLs and Python extension modules cannot be swapped out.</p> <p>Therefore, Nuitka VM allows you to embed DLL files as part of an executable that runs inside a protected VM (provided by a different product), that then is used to prevent that attack vector as well.</p>"},{"location":"commercial/#traceback-encryption","title":"Traceback Encryption","text":"<p>When your program is deployed and crashing, you could take potentially successful steps against these tracebacks appearing. But when you need to support your client, you must be able to tell why your software is crashing.</p> <p>Python tracebacks are suitable for this, but you cannot want them to be readable to the user. At this point, traceback encryption comes in handy. Nuitka Commercial allows you to encrypt all traceback outputs. They still carry the information you want, but only you will be able to decode them.</p> <p>Symmetric encryption (and asymmetric encryption in a future update) are available for you to use there.</p>"},{"location":"commercial/#encrypted-outputs","title":"Encrypted Outputs","text":"<p>If you need to query information from a machine or just in general want to have perfect protection, you can use the Nuitka plugin to make sure it can only output encrypted information on standard output and standard error.</p> <p>You will be able to decode outputs as necessary, and we will make sure, it's not readable to anybody but you.</p>"},{"location":"commercial/#older-oses-and-special-needs","title":"Older OSes and Special Needs","text":""},{"location":"commercial/#windows-7-support","title":"Windows 7 Support","text":"<p>Deploy to Windows 7 or even Windows XP</p> <p>We cannot make your program work those OSes unless it already does. For example, Qt6 requires even a newer Windows 10 version, not just any.</p> <p>But if it works with Python on these OSes, using older versions of packages and older toolchain, Nuitka Commercial allows you to make it portable.</p>"},{"location":"commercial/#rhel-7-support","title":"RHEL 7 Support","text":"<p>Deploy to Linux with a portable build result</p> <p>If your program works on RHEL 7 (CentOS 7), then Nuitka Commercial can make it portable across all Linux versions, using a container build.</p>"},{"location":"commercial/#commercial-only-packages","title":"Commercial-only Packages","text":"<p>For a select few packages, these are supported only with Nuitka Commercial. For example, we made patches for older packages like PySide2, or because the package is for accepting payments for your commercial product.</p>"},{"location":"commercial/#convenience","title":"Convenience","text":"<p>In this instance, you have special wishes that only commercial customers will have, and that are all effort to implement yourself, but come with Nuitka Commercial included. The time saved for development may already justify the investment.</p>"},{"location":"commercial/#windows-service","title":"Windows Service","text":"<p>Deploying your program as a Windows Service becomes trivial.</p> <p>For this, Nuitka Commercial has a dedicated plugin that makes deploying your practically unchanged program as a Windows Service very easy.</p>"},{"location":"commercial/#automatic-updates","title":"Automatic Updates","text":"<p>Support for automatic downloads, alerts to them, and automatic applying updates of your deployed software.</p> <p>Coming Soon</p> <p>The feature has not yet been fully implemented; we will add it in future updates.</p>"},{"location":"commercial/#sponsorship","title":"Sponsorship","text":"<p>You are happy with using Nuitka and want to benefit more because it solves a crucial part of your deployment workflow. You may or may not need the priority package or the Nuitka Commercial package.</p> <p>You can pay this relatively large amount and help Nuitka development in general. And you can know that you get the best support or simply reward the high-quality service you got with Nuitka.</p> <p>Naturally, sponsors will be entitled to all access and treated with highest priority.</p>"},{"location":"commercial/#pricing","title":"Pricing","text":"Nuitka CommercialFull PackageSponsor <p>\u20ac 250 / yr</p> <p>Subscribe Now</p> <ul> <li>Commercial only Features</li> <li>All your applications</li> <li>Standard Support</li> </ul> <p>\u20ac 400 / yr</p> <p>Subscribe Now</p> <ul> <li>Nuitka Commercial included</li> <li>Best Support included</li> <li>Issues have Priority</li> </ul> <p>\u20ac 1000 / yr</p> <p>Subscribe Now</p> <ul> <li>Best Support</li> <li>Nuitka Commercial</li> <li>Roadmap Influence</li> <li>Use Cases Priority</li> </ul> <p>Pricing Information</p> <p>Click the buttons above for Stripe payment (bank transfer, credit card, SEPA debit charge, etc).</p>"},{"location":"commercial/#limitations","title":"Limitations","text":"<p>When you buy Nuitka Commercial, parts of the code - mostly the plugins that implement the commercial features - are under a license that forbids you to distribute the Nuitka Commercial source code. That should be obvious, but otherwise it does not limit your use of Nuitka Commercial at all.</p> <p>You can use Nuitka Commercial on:</p> <ul> <li>All your machines, and all OSes</li> <li>All your software, deploy as many products and copies as you want</li> <li>Even after ending the subscription you can continue using what you have had in the end.</li> </ul> <p>Essentially, you are as free with Nuitka Commercial as with standard Nuitka. You are only prohibited to distribute Nuitka Commercial version to third parties.</p>"},{"location":"commercial/#delivery","title":"Delivery","text":"<ol> <li>Pay via Stripe and have that confirmed</li> <li>You get access to the private GitHub repo called <code>Nuitka-commercial</code> which contains Nuitka Commercial.</li> <li>Optionally, you can give more users in your GitHub organization access via access tokens.</li> <li>Nuitka Commercial is a drop-in replacement of Nuitka with only more options.</li> </ol>"},{"location":"commercial/#contact-us","title":"Contact Us","text":"<p>Please use this form to contact us with the intent of buying Nuitka services, but you still have open questions.</p> <p>You can also ask us to solve your deployment, where working in your environment, we set up the compilation, debug it, and you will compensate us for our time spent.</p> <p>Direct Purchase</p> <p>If all you want to do is to purchase, notice the purchase buttons above in the Pricing section. There is no need to fill out the form, Stripe collects all needed information.</p>"},{"location":"common-issue-solutions/","title":"Solutions to Common Issues","text":"<p>We recommend this page if you find Nuitka is not working out of the box for you. There are typical issues encountered and their solutions.</p> <p>This page can also teach you more about Nuitka advanced concepts; therefore, we recommend reading it for all levels of Nuitka users. It helps a lot to avoid issues and avoid non-optimal results.</p>"},{"location":"common-issue-solutions/#deployment-mode","title":"Deployment Mode","text":"<p>The non-deployment mode of Nuitka intends to assist you at the runtime of the compiled program. It aims to give you better error information and to catch typical user errors.</p> <p>By default, Nuitka is set to compile in non-deployment mode, which can be deactivated using the <code>--deployment</code> option. In this mode, Nuitka activates a range of safety guards and helpers to identify and resolve any incorrect usage of Nuitka.</p> <p>If you want to disable all these helpers, read more in the <code>Disabling All</code> section. Following is the list of currently implemented helpers you can also deactivate individually by name, and you might have to.</p>"},{"location":"common-issue-solutions/#fork-bombs-self-execution","title":"Fork Bombs (Self-execution)","text":"<p>So after compilation, <code>sys.executable</code> is the compiled binary. Certain Python packages like <code>multiprocessing</code>, <code>joblib</code>, or <code>loky</code> typically expect to run from a full <code>Python</code> environment with <code>sys.executable</code>. They expect to use the <code>-c command</code> or <code>-m module_name</code> options to be able to launch other code temporarily or permanently as a service daemon.</p> <p>However, with Nuitka, this executes your program again and puts these arguments in <code>sys.argv</code> where you may ignore them, and then you fork yourself again to launch the helper daemons. That leads to unintentionally repeated forking, potentially resulting in a scenario called fork bomb, where multiple processes spawn recursively, causing system freeze.</p> <p>To avoid this issue, ensure your program handles command line parsing correctly and avoids using unsupported packages that attempt re-execution. Additionally, you can turn off this specific behavior at compile time by using the <code>--no-deployment-flag=self-execution</code> flag.</p>"},{"location":"common-issue-solutions/#misleading-messages","title":"Misleading Messages","text":"<p>Some Python packages generate misleading error messages when they encounter import failures. These messages sometimes suggest actions that may not be the appropriate solution for compiled programs. Nuitka tries to correct them in non-deployment mode.</p> <p>Here is an example where Nuitka changes a message that asks to <code>pip install ...</code> a package. That, of course, is not the issue, and instead, Nuitka makes the program point the user to the <code>--include-module</code> option to use.</p> <pre><code>- module-name: 'imageio.core.imopen'\n  anti-bloat:\n    - replacements_plain:\n        '`pip install imageio[{config.install_name}]` to install it': '`--include-module={config.module_name}` with Nuitka to include it'\n        'err_type = ImportError': 'err_type = RuntimeError'\n      when: 'not deployment'\n</code></pre>"},{"location":"common-issue-solutions/#and-much-more","title":"And much more","text":"<p>The non-deployment mode of Nuitka is constantly evolving and adding more features, for example, something for <code>FileNotFoundError</code> should be added; there are plenty of ideas.</p>"},{"location":"common-issue-solutions/#disabling-all","title":"Disabling All","text":"<p>Of course, all these helpers are removed at once when using the <code>--deployment</code> option of Nuitka, but remember that you may want to re-enable it for debugging. To make this easy to toggle, you should use Nuitka Project Options and check an environment variable in them.</p> <pre><code># nuitka-project-if: os.getenv(\"DEPLOYMENT\") == \"yes\":\n#  nuitka-project: --deployment\n</code></pre> <p>We recommend selective disabling, as with PyPI upgrades and your code changes, these issues can resurface. The space saved by deployment mode is minimal, so we advise not to disable them. Instead, review each feature, and if you know, it won't affect your software or you won't need it, turn it off.</p>"},{"location":"common-issue-solutions/#windows-virus-scanners","title":"Windows Virus Scanners","text":"<p>Some Antivirus Vendors may flag compile binaries using Nuitka's default settings on Windows as malware. You can avoid this by purchasing the Nuitka Commercial plan and following the instructions given.</p>"},{"location":"common-issue-solutions/#linux-standalone","title":"Linux Standalone","text":"<p>For Linux standalone, building a binary that works on older Linux versions is challenging. The solution is to compile your application on the oldest Linux version that you intend to support.</p> <p>We recommend purchasing Nuitka Commercial plan to overcome this issue without extra effort. Nuitka Commercial has container-based builds that you can use.</p>"},{"location":"common-issue-solutions/#program-crashes-system-fork-bombs","title":"Program Crashes System (Fork Bombs)","text":"<p>A fork bomb is a program that spawns recursively, causing a system lock and ultimately crashing it in short order. Nuitka handles it for all packages known to do that.</p> <p>To debug fork bombs, use the <code>--experimental=debug-self-forking</code> option to check program fork behavior.</p> <pre><code>import os, sys\n\nif \"NUITKA_LAUNCH_TOKEN\" in os.environ:\n   sys.exit(\"Error, launch token must not be present or else fork bomb suspected.\")\nos.environ[\"NUITKA_LAUNCH_TOKEN\"] = \"1\"\n</code></pre>"},{"location":"common-issue-solutions/#memory-issues-and-compiler-bugs","title":"Memory issues and compiler bugs","text":"<p>Sometimes, the C compilers will crash with unspecific errors. It may be saying they cannot allocate memory, that some assembly input was truncated, or other similar error messages. All of these can be caused by using more memory than is available.</p>"},{"location":"common-issue-solutions/#solutions","title":"Solutions","text":"<ul> <li> <p>Ask Nuitka to use less memory: There is a dedicated option <code>--low-memory</code> which influences decisions of Nuitka, such that it avoids high usage of memory during compilation at the cost of increased compile time.</p> </li> <li> <p>Avoid 32-bit C compiler/assembler memory limits: Do not use a 32 bits compiler, but a 64 bit one.</p> </li> <li> <p>Use LTO compilation or not: With <code>--lto=yes</code> or <code>--lto=no</code> you can switch the C compilation to handle memory differently.</p> </li> <li> <p>Switch the C compiler to clang: Clang may be more memory efficient than gcc on certain platforms.</p> </li> <li> <p>Add a larger swap file to your embedded Linux: Use swap space to handle larger memory requirements.</p> </li> <li> <p>Limit the amount of compilation jobs: Use the <code>--jobs</code> option of Nuitka to limit parallel compilations.</p> </li> </ul>"},{"location":"contribute/","title":"Contribute to Nuitka","text":"<p>This page lists the many ways absolutely everybody can help and make Nuitka even better.</p> <p>Every Contribution Matters</p> <p>Whether you're a developer, writer, tester, or simply a Nuitka user, there are meaningful ways you can contribute to the project.</p>"},{"location":"contribute/#become-a-commercial-subscriber","title":"Become a Commercial Subscriber","text":"<p>The money earned through Nuitka Commercial is largely used to enhance standard Nuitka, making ongoing development possible.</p> <p>Purchase Commercial Subscription</p> <p>Supporting Development</p> <p>Commercial subscriptions directly fund Nuitka's development and enable new features that benefit everyone.</p>"},{"location":"contribute/#donation","title":"Donation","text":"<p>To exclusively support the free work on Nuitka and help improve it, you can make a donation.</p> <p>Make a Donation</p>"},{"location":"contribute/#enhance-documentation-and-website","title":"Enhance Documentation and Website","text":"<p>Most helpful to help others using Nuitka successfully as well. Learn how easy it is in our Website Manual.</p> <p>Website Manual</p> <p>Documentation Impact</p> <p>Good documentation can save countless hours for users and reduce support burden on the community.</p>"},{"location":"contribute/#join-the-nuitka-issue-triage-team","title":"Join the Nuitka Issue Triage Team","text":"<p>Help to assess new issues of Nuitka and categorize and even solve easier ones that, for example, only need package configuration added.</p> <p>Join Discord Server</p> <p>What Triage Involves</p> <ul> <li>Categorizing new issues</li> <li>Reproducing reported bugs</li> <li>Adding missing package configurations</li> <li>Helping users with common problems</li> </ul>"},{"location":"contribute/#enhance-nuitka-compatibility","title":"Enhance Nuitka Compatibility","text":"<p>Please create PRs for Nuitka.</p> <p>Adding support for packages with missing DLLs or missing data files is very easy thanks to Nuitka Package Configuration.</p> <p>Package Configuration Guide</p>"},{"location":"contribute/#remove-bloat-from-common-packages","title":"Remove Bloat from Common Packages","text":"<p>In Nuitka with the Nuitka Package Configuration, we have a powerful tool to reduce bloat in standard packages. Maybe targeting unnecessary usages of packages in your deployment, join and help us reduce optional dependencies.</p> <p>Anti-Bloat Benefits</p> <p>Reducing package bloat leads to smaller executables, faster startup times, and reduced memory usage.</p>"},{"location":"contribute/#add-more-nuitka-optimization","title":"Add More Nuitka Optimization","text":"<p>Adding new optimization is much more challenging, but join our Discord server and ask how you can help. You can help a lot with only Python skills, and with both C and Python skills, you will be perfect.</p> <p>Recommended Reading: - Developer Manual - Development guidelines - API Documentation - Code reference</p> <p>Join Developer Discussion</p> <p>Skill Requirements</p> <ul> <li>Python only: Can help with many optimizations</li> <li>Python + C: Perfect for core development</li> <li>Any skill level: Start with simpler issues</li> </ul>"},{"location":"contribute/#how-to-get-started","title":"How to Get Started","text":"<ol> <li> Support Financially - Commercial subscriptions or donations</li> <li> Improve Documentation - Help with guides and accuracy</li> <li> Join Triage Team - Assist in issue assessment</li> <li> Enhance Compatibility - Address package needs</li> <li> Reduce Bloat - Trim unnecessary dependencies</li> <li> Develop Optimizations - Add new features and improvements</li> </ol> <p>Ready to Contribute?</p> <p>Pick any area that interests you and matches your skills. Every contribution, no matter how small, helps make Nuitka better for everyone!</p>"},{"location":"credits/","title":"Credits","text":"<p>Why is Nuitka named like this, and who do we thank for it.</p> <p>Acknowledgments</p> <p>Nuitka is the result of countless contributions from individuals, projects, and the amazing Python community.</p>"},{"location":"credits/#nuitka-namesake","title":"Nuitka Namesake","text":"<p>The most credits are deserved by my ever loving and forgiving wife, who bears with me for spending literally all my spare and other time thinking of Nuitka.</p> <p>See an image of her on Twitter and make her happy with donations and Nuitka Commercial subscriptions!</p> <p>Nuitka is short for Annuitka, which is the nickname of my wife Anna who is Russian... here a recent shot with my son David.I one day made her the compiler as a gift. Much better name than \"Py2C\", right? pic.twitter.com/9A3nod8CZ7</p> \u2014 Kay Hayen (@KayHayen) August 13, 2018"},{"location":"credits/#contributors-to-nuitka","title":"Contributors to Nuitka","text":"<p>Thanks go to these individuals for their much-valued contributions to Nuitka. The order is sorted by time.</p>"},{"location":"credits/#early-contributors","title":"Early Contributors","text":"Li Xuan Ji Contributed patches for general portability issues and enhancements to the environment variable settings. Nicolas Dumazet Found and fixed reference counting issues, <code>import</code> packages work, improved some of the English and generally made good code contributions all over the place, solved code generation TODOs, did tree building cleanups, core stuff. Khalid Abu Bakr Submitted patches for his work to support MinGW and Windows, debugged the issues, and helped get cross compile with MinGW from Linux to Windows. This was quite difficult stuff. Liu Zhenhai Submitted patches for Windows support, making the inline Scons copy actually work on Windows as well. Also reported import related bugs, and generally helped make the Windows port more usable through testing and information."},{"location":"credits/#platform-support","title":"Platform Support","text":"Christopher Tott Submitted patches for Windows, and general as well as structural cleanups. Pete Hunt Submitted patches for macOS X support. Johan Holmberg Submitted patch for Python3 support on macOS X. David Cortesi Submitted patches and test cases to make macOS port more usable, specifically for the Python3 standalone support of Qt."},{"location":"credits/#core-features","title":"Core Features","text":"\"ownssh\" Submitted patches for built-ins module guarding, and made massive efforts to make high-quality bug reports. Also the initial \"standalone\" mode implementation was created by him. Umbra Submitted patches to make the Windows port more usable, adding user provided application icons, as well as MSVC support for large constants and console applications. Andrew Leech Submitted GitHub pull request to allow using \"-m nuitka\" to call the compiler. Also pull request to improve <code>bist_nuitka</code> and to do the registration. Pawe\u0142 K Submitted GitHub pull request to remove glibc from standalone distribution, saving size and improving robustness considering the various distributions."},{"location":"credits/#modern-contributors","title":"Modern Contributors","text":"Orsiris de Jong Submitted GitHub pull request to implement the dependency walking with <code>pefile</code> under Windows. Also provided the implementation of Dejong Stacks. Jorj X. McKie Submitted GitHub pull requests with NumPy plugin to retain its accelerating libraries, and Tkinter to include the TCL distribution on Windows. Ben F\u00e4ssler (alias \"Fire Cube\") Lots of work on Nuitka Package configuration YAML configuration and mass migration of older Python plugin code to it, introducing the YAML schema for Nuitka Package configuration. Also added a well needed formatter that retains comments. Introduced the options-nanny plugin, and last but not least, helped with the website design, in particular polishing the CSS for the subscribe buttons to look very good."},{"location":"credits/#creative-contributions","title":"Creative Contributions","text":"Juan Carlos Paco Submitted cleanup patches, created a Nuitka GUI and a Ninja IDE plugin for Nuitka. Both are no longer actively maintained though. \"Dr. Equivalent\" Submitted the Nuitka Logo."},{"location":"credits/#projects-used-by-nuitka","title":"Projects Used by Nuitka","text":"<p>Nuitka builds upon the shoulders of giants. Here are the key projects that make Nuitka possible:</p>"},{"location":"credits/#core-dependencies","title":"Core Dependencies","text":"CPythonGCCSCons <p>The CPython Project</p> <p>Thanks for giving us CPython, which is the base of Nuitka. We are nothing without it.</p> <p>The GCC Project</p> <p>Thanks for not only the best compiler suite but also thanks for making it easy supporting to get Nuitka off the ground. Your compiler was the first usable for Nuitka and with very little effort.</p> <p>The SCons Project</p> <p>Thanks for tackling the difficult points and providing a Python environment to make the build results. This is such a perfect fit to Nuitka and a dependency that will likely remain.</p>"},{"location":"credits/#development-tools","title":"Development Tools","text":"ValgrindBuildbotCode Quality <p>The Valgrind Project</p> <p>Luckily we can use Valgrind to determine if something is an actual improvement without the noise. And it's also helpful to determine what's actually happening when comparing.</p> <p>The Buildbot Project</p> <p>Thanks for creating an easy to deploy and use continuous integration framework that also runs on Windows and is written and configured in Python code. This allows running the Nuitka tests long before release time.</p> <p>isort - Thanks for making nice import ordering so easy.</p> <p>black - Thanks for making a fast and reliable way for automatically formatting the Nuitka source code.</p>"},{"location":"credits/#infrastructure","title":"Infrastructure","text":"NeuroDebianopenSUSEMinGW64 <p>The NeuroDebian Project</p> <p>Thanks for hosting the build infrastructure that the Debian sponsor Yaroslav Halchenko uses to provide packages for all Ubuntu versions.</p> <p>The openSUSE Buildservice</p> <p>Thanks for hosting this excellent service that allows us to provide RPMs for a large variety of platforms and make them available immediately nearly at release time.</p> <p>The MinGW64 Project</p> <p>Thanks for porting the GCC to Windows. This allowed portability of Nuitka with relatively little effort.</p>"},{"location":"credits/#how-to-contribute","title":"How to Contribute","text":"<p>Want to see your name here? There are many ways to contribute to Nuitka:</p> <ul> <li>Code Contributions - Submit pull requests for bug fixes and features</li> <li>Documentation - Help improve guides and documentation</li> <li>Testing - Report bugs and test new features</li> <li>Package Configuration - Add support for new Python packages</li> <li>Financial Support - Consider Nuitka Commercial or donations</li> </ul> <p>Learn How to Contribute</p> <p>Thank You</p> <p>The Nuitka project is made possible by the dedication and contributions of everyone listed here, as well as countless others who have helped through testing, feedback, and support. Thank you for making Nuitka better!</p>"},{"location":"developer-manual/","title":"Nuitka Developer Manual","text":"<p>The purpose of this Developer Manual is to present the current design of Nuitka, the project rules, and the motivations for choices made. It is intended to be a guide to the source code, and to give explanations that don't fit into the source code in comments form.</p> <p>It should be used as a reference for the process of planning and documenting decisions we made. Therefore we are e.g. presenting here the type inference plans before implementing them. And we update them as we proceed.</p> <p>It grows out of discussions and presentations made at conferences as well as private conversations or issue tracker.</p>"},{"location":"developer-manual/#milestones","title":"Milestones","text":"<ol> <li>Feature parity with CPython, understand all the language construct and behave absolutely compatible.</li> </ol> <p>Feature parity has been reached for CPython 2.6 and 2.7. We do not target any older CPython release. For CPython 3.4 up to 3.13 it also has been reached (not all 3.12+ features are currently fully working though). We do not target the older and practically unused CPython 3.0 to 3.3 releases.</p> <p>This milestone was reached. Dropping support for Python 2.6 and 3.3 is an option, should this prove to be any benefit. Currently it is not, as it extends the test coverage only.</p> <ol> <li>Create the most efficient native code from this. This means to be fast with the basic Python object handling.</li> </ol> <p>This milestone was reached, although of course, micro optimizations to this are happening all the time.</p> <ol> <li>Constant propagation, determine as many values and useful constraints as possible at compile time and create more efficient code.</li> </ol> <p>This milestone is considered almost reached. We continue to discover new things, but the infrastructure is there, and these are easy to add.</p> <ol> <li>Type inference, detect and special case the handling of strings, integers, lists in the program.</li> </ol> <p>This milestone is considered in progress.</p> <ol> <li>Add interfacing to C code, so Nuitka can turn a <code>ctypes</code> binding into an efficient binding as written with C.</li> </ol> <p>This milestone is planned only.</p> <ol> <li>Add hints module with a useful Python implementation that the compiler can use to learn about types from the programmer.</li> </ol> <p>This milestone is planned only.</p>"},{"location":"developer-manual/#version-numbers","title":"Version Numbers","text":"<p>For Nuitka we use semantic versioning, initially with a leading zero still, once we pass release <code>1.9</code>, the scheme will indicate the <code>10</code> through using <code>2.0</code>.</p>"},{"location":"developer-manual/#current-state","title":"Current State","text":"<p>Nuitka top level works like this:</p> <ul> <li><code>nuitka.tree.Building</code> outputs node tree</li> <li><code>nuitka.optimization</code> enhances it as best as it can</li> <li><code>nuitka.finalization</code> prepares the tree for code generation</li> <li><code>nuitka.code_generation.CodeGeneration</code> orchestrates the creation of code snippets</li> <li><code>nuitka.code_generation.*Codes</code> knows how specific code kinds are created</li> <li><code>nuitka.MainControl</code> keeps it all together</li> </ul> <p>This design is intended to last.</p> <p>Regarding types, the state is:</p> <ul> <li> <p>Types are always <code>PyObject *</code>, and only a few C types, e.g. <code>nuitka_bool</code> and <code>nuitka_void</code> and more are coming. Even for objects, often it's know that things are e.g. really a <code>PyTupleObject **</code>, but no C type is available for that yet.</p> </li> <li> <p>There are a some specific use of types beyond \"compile time constant\", that are encoded in type and value shapes, which can be used to predict some operations, conditions, etc. if they raise, and result types they give.</p> </li> <li> <p>In code generation, the supported C types are used, and sometimes we have specialized code generation, e.g. a binary operation that takes an <code>int</code> and a <code>float</code> and produces a <code>float</code> value. There will be fallbacks to less specific types.</p> </li> </ul> <p>The expansion with more C types is currently in progress, and there will also be alternative C types, where e.g. <code>PyObject *</code> and <code>C long</code> are in an enum that indicates which value is valid, and where special code will be available that can avoid creating the <code>PyObject **</code> unless the later overflows.</p>"},{"location":"developer-manual/#setting-up-the-development-environment-for-nuitka","title":"Setting up the Development Environment for Nuitka","text":"<p>Currently there are very different kinds of files that we need support for. This is best addressed with an IDE. We cover here how to setup the most common one.</p>"},{"location":"developer-manual/#visual-studio-code","title":"Visual Studio Code","text":"<p>Download Visual Studio Code from here: https://code.visualstudio.com/download</p> <p>At this time, this is the recommended IDE for Linux and Windows. This is going to cover the plugins to install. Configuration is part of the <code>.vscode</code> in your Nuitka checkout. If you are not familiar with Eclipse, this is Free Software IDE,designed to be universally extended, and it truly is. There are plugins available for nearly everything.</p> <p>The extensions to be installed are part of the Visual Code recommendations in <code>.vscode/extensions.json</code> and you will be prompted about that and ought to install these.</p>"},{"location":"developer-manual/#eclipse-pycharm","title":"Eclipse / PyCharm","text":"<p>Don't use these anymore, we consider Visual Studio Code to be far superior for delivering a nice out of the box environment.</p>"},{"location":"developer-manual/#commit-and-code-hygiene","title":"Commit and Code Hygiene","text":"<p>In Nuitka we have tools to auto format code, you can execute them manually, but it's probably best to execute them at commit time, to make sure when we share code, it's already well format, and to avoid noise doing cleanups.</p> <p>The kinds of changes also often cause unnecessary merge conflicts, while the auto format is designed to format code also in a way that it avoids merge conflicts in the normal case, e.g. by doing imports one item per line.</p> <p>In order to set up hooks, you need to execute these commands:</p> <pre><code># Where python is the one you use with Nuitka, this then gets all\n# development requirements, can be full PATH.\npython -m pip install -r requirements-devel.txt\npython ./misc/install-git-hooks.py\n</code></pre> <p>These commands will make sure that the <code>autoformat-nuitka-source</code> is run on every staged file content at the time you do the commit. For C files, it may complain unavailability of <code>clang-format</code>, follow it's advice. You may call the above tool at all times, without arguments to format call Nuitka source code.</p> <p>Should you encounter problems with applying the changes to the checked out file, you can always execute it with <code>COMMIT_UNCHECKED=1</code> environment set.</p>"},{"location":"developer-manual/#coding-rules-python","title":"Coding Rules Python","text":"<p>These rules should generally be adhered when working on Nuitka code. It's not library code and it's optimized for readability, and avoids all performance optimization for itself.</p>"},{"location":"developer-manual/#tool-to-format","title":"Tool to format","text":"<p>There is a tool <code>bin/autoformat-nuitka-source</code> which is to apply automatic formatting to code as much as possible. It uses <code>black</code> (internally) for consistent code formatting. The imports are sorted with <code>isort</code> for proper order.</p>"},{"location":"donations/","title":"Donation","text":"<p>Nuitka is an effort, mainly driven in my spare time.</p> <p>For travels to Python conferences, web site costs, etc. I am accepting donations via PayPal. The money received will be used to sponsor Nuitka development.</p>"},{"location":"donations/#paypal","title":"PayPal","text":"<p>You can support Nuitka development by making a donation through PayPal:</p> <p>Thank you for your support!</p>"},{"location":"download/","title":"Free Download","text":"<p>Thank you for downloading Nuitka</p> <p>Please consider becoming a Nuitka commercial subscriber.</p>"},{"location":"download/#nuitka-standard","title":"Nuitka Standard","text":"<p>The standard edition bundles your code, dependencies and data into a single executable if you want. It also does acceleration, just running faster in the same environment, and can produce extension modules as well. It is freely distributed under the Apache license.</p> <p>Get Nuitka Standard</p>"},{"location":"download/#nuitka-commercial","title":"Nuitka Commercial","text":"<p>The commercial edition additionally protects your code, data and outputs, so that users of the executable cannot access these. This a private repository of plugins that you pay to get access to. Additionally, you can purchase priority support.</p> <p>Learn more about Nuitka commercial</p> <p>The current release is Nuitka {{ nuitka_version }}. Stable releases are supported with hot fixes, indicated by the last of the 4 digits.</p> <p>Release Stability</p> <p>Stable releases are supposed to work for you. Develop releases are snapshots of the current <code>develop</code> branch in git, usually also relatively stable, but also rarely break.</p> <p>Package Build Timing</p> <p>During releases package builds can lag behind for a couple of days.</p>"},{"location":"download/#license","title":"License","text":"<p>Nuitka is licensed under the Apache License, Version 2.0; you may not use it except in compliance with the License. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"download/#installation-methods","title":"Installation Methods","text":"PyPISourcesGit <p>There is Nuitka on PyPI as well. So you can install with <code>pip</code> as follows.</p> <p>Easy Installation</p> <p>The stable version from PyPI can be installed via pip, and has no dependencies on any package, and is a source package, so you will have an easy time, even on e.g. Windows to use it.</p> <pre><code># Stable version\npython -m pip install -U nuitka\n\n# Develop version\npython -m pip install -U \"https://github.com/Nuitka/Nuitka/archive/develop.zip\"\n</code></pre> <p>Python Binary</p> <p>Do this with the python binary, you want to be compiled against.</p> <p>The source archives can be used directly after unpacking, simply start with <code>python bin/nuitka --help</code> and read <code>README.pdf</code> or <code>README.rst</code> to get started. Take especially care to read the User Manual, such that you don't go on a wrong track.</p> <p>Download source archives</p> <p>Stable: <pre><code>git clone --branch main https://github.com/Nuitka/Nuitka\n</code></pre></p> <p>Develop: <pre><code>git clone --branch develop https://github.com/Nuitka/Nuitka\n</code></pre></p> <p>Visit https://github.com/Nuitka/Nuitka for the Nuitka repository on Github.</p>"},{"location":"download/#package-repositories","title":"Package Repositories","text":"WindowsDebian/Ubuntu/MintRHELCentOSFedoraopenSUSEArch LinuxGentoomacOS <p>The MSI installers are discontinued as Python has deprecated their support for them, as well as Windows 10 making it harder to users to install them. Using the PyPI installation is recommended on Windows.</p> StableDevelop <pre><code>CODENAME=`egrep 'UBUNTU_CODENAME|VERSION_CODENAME' /etc/os-release | sort | head -1 | cut -d= -f2`\nif [ -z \"$CODENAME\" ]\nthen\n   CODENAME=`lsb_release -c -s`\nfi\nwget -O - https://nuitka.net/deb/archive.key.gpg | sudo apt-key add -\nsudo apt-get install ca-certificates\nsudo echo &gt;/etc/apt/sources.list.d/nuitka.list \"deb https://nuitka.net/deb/stable/$CODENAME $CODENAME main\"\nsudo apt-get update\nsudo apt-get install nuitka\n</code></pre> <pre><code>CODENAME=`egrep 'UBUNTU_CODENAME|VERSION_CODENAME' /etc/os-release | cut -d= -f2`\nif [ -z \"$CODENAME\" ]\nthen\n   CODENAME=`lsb_release -c -s`\nfi\nwget -O - https://nuitka.net/deb/archive.key.gpg | sudo apt-key add -\nsudo apt-get install ca-certificates\nsudo echo &gt;/etc/apt/sources.list.d/nuitka.list \"deb https://nuitka.net/deb/develop/$CODENAME $CODENAME main\"\nsudo apt-get update\nsudo apt-get install nuitka\n</code></pre> <p>Standard Repository</p> <p>Because Nuitka is part of Debian Stable/Testing/Unstable, a stable version is already in the standard repository. This is the only way to access the develop version of Nuitka though.</p> <pre><code># Detect the RHEL version\neval `grep VERSION_ID= /etc/os-release`\n\nyum-config-manager --add-repo http://download.opensuse.org/repositories/home:/kayhayen/RedHat_RHEL-${VERSION_ID}/home:kayhayen.repo\n\n# Install either of these, but not both\nyum install nuitka\nyum install nuitka-unstable\n</code></pre> <pre><code># CentOS 6:\nyum-config-manager --add-repo http://download.opensuse.org/repositories/home:/kayhayen/CentOS_CentOS-6/home:kayhayen.repo\n# CentOS 7\nyum-config-manager --add-repo http://download.opensuse.org/repositories/home:/kayhayen/CentOS_7/home:kayhayen.repo\n# CentOS 8\nyum-config-manager --add-repo http://download.opensuse.org/repositories/home:/kayhayen/CentOS_8/home:kayhayen.repo\n\n# Install either of these, but not both\nyum install nuitka\nyum install nuitka-unstable\n</code></pre> <pre><code># Detect the Fedora version\neval `grep VERSION_ID= /etc/os-release`\n\n# Use yum on older versions\ndnf config-manager --add-repo https://download.opensuse.org/repositories/home:/kayhayen/Fedora_${VERSION_ID}/home:kayhayen.repo\n\n# Install either of these, but not both\ndnf install nuitka\ndnf install nuitka-unstable\n</code></pre> <pre><code># Detect the OpenSUSE leap version\neval `grep VERSION_ID= /etc/os-release`\n\n# Add Nuitka repo\nzypper ar -f https://download.opensuse.org/repositories/home:/kayhayen/Open_${VERSION_ID}/home:kayhayen.repo\n\n# Install either of these, but not both\nzypper install nuitka\nzypper install nuitka-unstable\n</code></pre> <p>Stable: Execute <code>pacman -S nuitka</code></p> <p>Develop: Nuitka from git develop</p> <p>Execute <code>emerge -a dev-python/nuitka</code></p> <p>No installer is available for macOS. Use the source packages, clone from git, or use PyPI.</p>"},{"location":"impressum/","title":"Impressum","text":"<p>Legal information and contact details for the Nuitka website and services.</p> <p>Legal Notice</p> <p>This page contains the required legal information (Impressum) as per German law.</p>"},{"location":"impressum/#website-information","title":"Website Information","text":"<p>This is the Nuitka website, run by Kay Hayen on his personal machine. Its main mission is to serve as a platform for his Python compiler work and announcements. This website is in part personal and in part commercial.</p>"},{"location":"impressum/#contact-information","title":"Contact Information","text":"<p>Postal Address: <pre><code>Kay Hayen\nHegelstrasse 21\n76356 Weingarten\nGermany\n</code></pre></p> <p>Email: Kay.Hayen@gmail.com</p> <p>In case of issues with the website, please contact via the email address above.</p>"},{"location":"impressum/#additional-resources","title":"Additional Resources","text":"<p>More resources related to Nuitka:</p> <ul> <li>Nuitka Issue Tracker - Report bugs and request features</li> <li>Mastodon and Twitter - Follow @KayHayen for updates and discussion</li> <li>YouTube Channel - Presentations of Nuitka at conferences</li> </ul>"},{"location":"impressum/#company-information","title":"Company Information","text":""},{"location":"impressum/#business-details","title":"Business Details","text":"Detail Information Company Legal Name Nuitka Services Country Germany Tax ID 34185/34910 VAT ID DE358838909"},{"location":"impressum/#contact-person","title":"Contact Person","text":"Role Information Primary Contact Kay Hayen Job Title Sole Owner Email kay@nuitka.net"},{"location":"impressum/#legal-disclaimers","title":"Legal Disclaimers","text":""},{"location":"impressum/#content-responsibility","title":"Content Responsibility","text":"<p>The content of this website is created and maintained by Kay Hayen. While every effort is made to ensure accuracy, no warranty is provided for the completeness, accuracy, or timeliness of the information provided.</p>"},{"location":"impressum/#external-links","title":"External Links","text":"<p>This website contains links to external websites. We have no influence over the content of these external sites and therefore cannot accept any liability for their content. The operators of the linked pages are solely responsible for their content.</p>"},{"location":"impressum/#privacy","title":"Privacy","text":"<p>This website may collect standard web server logs including IP addresses and browser information. No personal data is collected without explicit consent. For commercial services, separate terms and privacy policies apply.</p>"},{"location":"impressum/#applicable-law","title":"Applicable Law","text":"<p>This website and all services provided are subject to German law. Any disputes shall be resolved under German jurisdiction.</p> <p>Last updated: This impressum is kept current with the latest legal requirements and business information.</p>"},{"location":"package-configuration/","title":"Nuitka Package Configuration","text":""},{"location":"package-configuration/#introduction","title":"Introduction","text":"<p>For packaging, and compatibility, some Python packages need to have special considerations in Nuitka. Some will not work without certain data files, sometimes modules depend on other modules in a hidden way, and for standalone DLLs might have to be included, that are loaded dynamically and therefore also invisible.</p> <p>Another area is compatibility hacks, and removing bloat from code or just making sure, you are not using an unsupported version or wrong options for a package.</p> <p>To make it easier to deal with missing DLLs, implicit imports, data files, bloat etc. Nuitka has a system with Yaml files. These ship inside of it and are located under <code>plugins/standard</code> and are designed to be easily be extended.</p> <p>The structure of the filename is always <code>*nuitka-package.config.yml</code>. The <code>standard</code> file includes all things that are not in the standard library (<code>stdlib</code>) of Python. In <code>stdlib2</code> and <code>stdlib3</code> there are entries for the standard library. In <code>stdlib2</code> there are only those for modules that are no longer available in Python3.</p> <p>If you want to use your own configuration, you can do so by passing the filename of your Yaml file via the <code>--user-package-configuration-file=my.nuitka-package.config.yml</code> option.</p> <p>If it could be interesting for the other parts of the user base of Nuitka, please do a PR that adds it to the general files. In this way, not every user has to repeat what you just did, and we can collectively maintain it.</p>"},{"location":"package-configuration/#the-yaml-configuration-file","title":"The YAML Configuration File","text":"<p>At the beginning of the file you will find the following lines, which you can ignore, they are basically only there to silence checkers about problems that are too hard to avoid.</p> <pre><code># yamllint disable rule:line-length\n# yamllint disable rule:indentation\n# yamllint disable rule:comments-indentation\n# too many spelling things, spell-checker: disable\n---\n</code></pre> <p>An entry in the file look like this:</p> <pre><code>- module-name: 'pandas._libs'\n  implicit-imports:\n    - depends:\n        - 'pandas._libs.tslibs.np_datetime'\n        - 'pandas._libs.tslibs.nattype'\n        - 'pandas._libs.tslibs.base'\n</code></pre> <p>The <code>module-name</code> value is the name of the affected module. We will show and explain to you everything the other things in detail later. But the key principle is that a declaration always references a module by name.</p> <p>It is also important to know that you do not have to worry about formatting. We have programmed our own tool for this, which formats everything automatically. This is executed via <code>bin\\autoformat-nuitka-source</code> and automatically when pushing with <code>git</code> if you install the git hook (see Developer Manual for that).</p> <p>There is also a Yaml schema file to check your files against and that in Visual Code is automatically applied to the Yaml files and that then supports you with auto-completion in Visual Code. So actually doing the change in PR form can be easier than not.</p>"},{"location":"package-configuration/#configuration-features","title":"Configuration Features","text":""},{"location":"package-configuration/#data-files","title":"Data Files","text":"<pre><code>data-files:\n  dest_path: '.' # default, relative to package directory, normally not needed\n  dirs:\n    - 'dir1'\n\n  patterns:\n    - 'file1'\n    - '*.dat'\n\n  empty_dirs:\n    - 'empty_dir'\n\n  empty_dir_structures:\n    - 'empty_dir_structure'\n\n  when: 'win32'\n</code></pre> <p>If a module needs data files, you can get Nuitka to copy them into the output with the following features.</p>"},{"location":"package-configuration/#features","title":"Features","text":"<ul> <li><code>dest_path</code>: target directory</li> <li><code>dirs</code>: all directories that should be copied</li> <li><code>patterns</code>: all files that should be copied (filename can be a glob pattern)</li> <li><code>empty_dirs</code>: all empty directories that should be copied</li> <li><code>empty_dir_structures</code>: all empty directory structures that should be copied</li> <li><code>when</code>: conditional inclusion based on platform</li> </ul>"},{"location":"package-configuration/#examples","title":"Examples","text":"<p>Example 1: Simple data folder</p> <p>The most simple form just adds a data folder. The data files are in a folder and lives inside the package directory.</p> <pre><code>- module-name: 'customtkinter'\n  data-files:\n     dirs:\n       - 'assets'\n</code></pre> <p>Example 2: Complete folder with data files</p> <p>This example includes a complete folder with data files in a package.</p> <pre><code>- module-name: 'tkinterweb'\n  data-files:\n    dirs:\n      - 'tkhtml'\n</code></pre> <p>Example 3: Empty folder creation</p> <p>This example will make sure an empty folder is created relative to a package.</p> <pre><code>- module-name: 'Crypto.Util._raw_api'\n  data-files:\n    empty_dirs:\n      - '.'\n</code></pre> <p>Note</p> <p>The reason this is necessary is that some packages expect to have their directory as derived from <code>__file__</code> to exist. But for compiled packages, unless there is extension packages or data files copied into them, these directories do not exist.</p>"},{"location":"package-configuration/#dlls","title":"DLLs","text":"<pre><code>dlls:\n  - from_filenames:\n      relative_path: 'dlls'\n</code></pre> <p>For Windows standalone distributions, DLL files might need to be included that are loaded at runtime.</p>"},{"location":"package-configuration/#implicit-imports","title":"Implicit Imports","text":"<pre><code>implicit-imports:\n  - depends:\n      - 'module_name1'\n      - 'module_name2'\n</code></pre> <p>Some modules import other modules in ways that Nuitka cannot detect statically. These hidden dependencies need to be specified.</p>"},{"location":"package-configuration/#anti-bloat","title":"Anti-Bloat","text":"<pre><code>anti-bloat:\n  - replacements_plain:\n      'old_text': 'new_text'\n    when: 'not deployment'\n</code></pre> <p>Anti-bloat configurations help reduce the size of compiled applications by removing or replacing unnecessary code.</p>"},{"location":"package-configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Test your configurations thoroughly before submitting</li> <li>Use minimal configurations - only include what's necessary</li> <li>Document complex cases with comments in the YAML</li> <li>Consider platform differences using the <code>when</code> condition</li> <li>Submit improvements back to the community via Pull Requests</li> </ol>"},{"location":"package-configuration/#getting-help","title":"Getting Help","text":"<p>If you encounter issues with package configurations:</p> <ol> <li>Check the existing configurations in <code>plugins/standard</code></li> <li>Search for similar packages in the configuration files</li> <li>Test with minimal examples</li> <li>Report issues with detailed reproduction steps</li> <li>Consider contributing your solutions back to the project</li> </ol>"},{"location":"performance/","title":"Performance","text":"<p>This page gives an overview, of what to currently expect in terms of performance from Nuitka.</p>"},{"location":"performance/#pystone-results","title":"Pystone Results","text":"<p>The results are the top value from this kind of output, running pystone 1000 times and taking the minimal value. The idea is that the fastest run is most meaningful, and eliminates usage spikes.</p> <pre><code>echo \"Uncompiled Python2\"\nfor i in {1..100}; do BENCH=1 python2 tests/benchmarks/pystone.py ; done | sort -rn | head -n 1\npython2 -m nuitka --lto=yes --pgo tests/benchmarks/pystone.py\necho \"Compiled Python2\"\nfor i in {1..100}; do BENCH=1 ./pystone.bin ; done | sort -n | head -rn 1\n\necho \"Uncompiled Python3\"\nfor i in {1..100}; do BENCH=1 python3 tests/benchmarks/pystone3.py ; done | sort -rn | head -n 1\npython3 -m nuitka --lto=yes --pgo tests/benchmarks/pystone3.py\necho \"Compiled Python3\"\nfor i in {1..100}; do BENCH=1 ./pystone3.bin ; done | sort -rn | head -n 1\n</code></pre>"},{"location":"performance/#benchmark-results","title":"Benchmark Results","text":"Python Uncompiled Compiled LTO Compiled PGO Debian Python 2.7 137497.87 (1.000) 460995.20 (3.353) 503681.91 (3.663) Nuitka Python 2.7 144074.78 (1.048) 479271.51 (3.486) 511247.44 (3.718)"},{"location":"performance/#performance-expectations","title":"Performance Expectations","text":""},{"location":"performance/#compilation-modes","title":"Compilation Modes","text":"Acceleration ModeStandalone ModeOnefile Mode <p>In acceleration mode (default), Nuitka compiles your Python modules but keeps them running in the same Python environment. This provides:</p> <ul> <li>Moderate speed improvements (1.2x - 3x typical)</li> <li>Full compatibility with the Python ecosystem</li> <li>Easy debugging with familiar tools</li> <li>No deployment complexity</li> </ul> <p>Standalone mode creates self-contained executables:</p> <ul> <li>Similar performance to acceleration mode</li> <li>Larger file sizes due to included dependencies</li> <li>No Python installation required on target machines</li> <li>Longer compilation times</li> </ul> <p>Onefile mode creates single executable files:</p> <ul> <li>Slight performance overhead during startup</li> <li>Convenient distribution as single file</li> <li>Temporary file extraction on first run</li> <li>Best for simple applications</li> </ul>"},{"location":"performance/#optimization-features","title":"Optimization Features","text":""},{"location":"performance/#link-time-optimization-lto","title":"Link Time Optimization (LTO)","text":"<p>Using <code>--lto=yes</code> enables link-time optimization which can provide significant performance improvements:</p> <ul> <li>3-4x performance gains in computational code</li> <li>Longer compilation times</li> <li>Better cross-module optimization</li> <li>Recommended for production builds</li> </ul> <pre><code>python -m nuitka --lto=yes your_script.py\n</code></pre>"},{"location":"performance/#profile-guided-optimization-pgo","title":"Profile Guided Optimization (PGO)","text":"<p>Using <code>--pgo</code> enables profile-guided optimization:</p> <ul> <li>Additional 5-15% performance over LTO</li> <li>Requires running the program during compilation</li> <li>Best for CPU-intensive applications</li> <li>Longer compilation process</li> </ul> <pre><code>python -m nuitka --pgo your_script.py\n</code></pre>"},{"location":"performance/#performance-factors","title":"Performance Factors","text":""},{"location":"performance/#what-gets-faster","title":"What Gets Faster","text":"<ul> <li>Mathematical computations</li> <li>Loop-heavy code</li> <li>Function calls</li> <li>Local variable access</li> <li>String operations</li> </ul>"},{"location":"performance/#what-stays-similar","title":"What Stays Similar","text":"<ul> <li>I/O operations (file, network)</li> <li>Third-party C extensions (NumPy, etc.)</li> <li>System calls</li> <li>Database operations</li> </ul>"},{"location":"performance/#compilation-overhead","title":"Compilation Overhead","text":"Mode Compilation Time Disk Space Memory Usage Acceleration Fast Minimal Low Standalone Medium High Medium Onefile Slow Medium High"},{"location":"performance/#real-world-performance","title":"Real-World Performance","text":"<p>For typical Python applications, you can expect:</p> <ul> <li>Web applications: 20-50% faster response times</li> <li>Data processing: 2-4x faster execution</li> <li>Mathematical calculations: 3-10x performance gains</li> <li>Startup time: Similar or slightly faster (except onefile)</li> </ul>"},{"location":"performance/#benchmarking-your-code","title":"Benchmarking Your Code","text":"<p>To measure performance improvements in your specific use case:</p> <ol> <li>Create a baseline with standard Python</li> <li>Compile with Nuitka using appropriate flags</li> <li>Run multiple iterations to account for variance</li> <li>Consider using profiling tools like <code>cProfile</code></li> </ol> <pre><code>import time\n\ndef benchmark_function():\n    start_time = time.time()\n    # Your code here\n    end_time = time.time()\n    return end_time - start_time\n\n# Run multiple times and take average\ntimes = [benchmark_function() for _ in range(100)]\naverage_time = sum(times) / len(times)\n</code></pre> <p>Performance Tips</p> <ul> <li>Use <code>--lto=yes</code> for production builds</li> <li>Consider <code>--pgo</code> for CPU-intensive applications</li> <li>Profile your code to identify bottlenecks</li> <li>Test on target deployment platforms</li> <li>Measure actual performance rather than assuming gains</li> </ul>"},{"location":"streaming/","title":"Streaming","text":"<p>The Nuitka development has become richer by Kay developing online once in a while. This has a lot of constraints to address, but it will happen on a regular basis.</p> <p>Live Development</p> <p>Watch live Nuitka development sessions where you can learn about the internals, ask questions, and see new features being built in real-time.</p>"},{"location":"streaming/#why-stream","title":"Why Stream?","text":"<p>Streaming provides an opportunity to:</p> <ul> <li>Learn Nuitka internals by watching live development</li> <li>Ask questions directly to the main developer</li> <li>Suggest improvements and discuss features</li> <li>See complex problems solved in real-time</li> <li>Understand the development process behind a Python compiler</li> </ul>"},{"location":"streaming/#material-video-camera-how-to-watch","title":":material-video-camera: How to Watch","text":""},{"location":"streaming/#discord-integration","title":"Discord Integration","text":"<p>On Discord, we have a Streaming room. There is a \"react\" bot that you can use to be automatically notified by Discord when a stream is started. Join our Discord server: https://discord.gg/nZ9hr9tUck</p>"},{"location":"streaming/#platform","title":"Platform","text":"<p>The main streaming platform is YouTube on Kay's channel: https://www.youtube.com/c/KayHayen</p>"},{"location":"streaming/#chat-options","title":"Chat Options","text":"<ul> <li>Discord Chat: Primary chat for live interaction</li> <li>Gitter Mirror: The main chat on Gitter is linked to the Discord chat room for people not on Discord</li> </ul> <p>Call-in Feature</p> <p>Discord can be used for a call-in part where Kay can un-mute people and discuss one-on-one with viewers live on air, answering questions directly.</p>"},{"location":"streaming/#when-we-stream","title":"When We Stream","text":"<p>Typical Schedule: - Days: Usually weekends - Duration: Full day sessions with breaks - Time Zones: CEST (Central European Summer Time) - Format: Morning session + afternoon/evening session</p> <p>Session Structure: - Morning development session - Lunch/sports break - Afternoon/evening continuation - This essentially becomes a full work day on Nuitka</p> <p>Family Schedule</p> <p>The exact times depend on Kay's family situation. Start dates are announced several days ahead of time on Twitter and via the Discord streams react bot.</p>"},{"location":"streaming/#what-we-work-on","title":"What We Work On","text":""},{"location":"streaming/#typical-stream-content","title":"Typical Stream Content","text":"<p>Challenging Technical Topics: - Code specialization improvements (e.g., making <code>INT</code>, <code>LONG</code>, and <code>CLONG</code> work better) - Performance optimizations for operations like <code>some_int += 2</code> - Website improvements and updates - Specific optimization implementations</p> <p>Regular Activities: - Project status reports - General clarification sessions - Planned improvements that haven't been tackled yet - Community-suggested features and fixes</p>"},{"location":"streaming/#stream-goals","title":"Stream Goals","text":"<p>Past Successful Streams</p> <p>Previous streams have successfully covered website improvements, specific optimizations, and general development work. The interactive format works really well for both education and development.</p>"},{"location":"streaming/#announcements","title":"Announcements","text":""},{"location":"streaming/#how-to-stay-informed","title":"How to Stay Informed","text":"<p>Advance Notice: - Friday: Topic announcement via blog post and/or Twitter - Discord Ping: When going live - Pre-stream: A few hours before starting</p> <p>Notification Channels: - Twitter: @kayhayen - Discord: Streams react bot notifications - Gitter: Text message announcements - YouTube: Bell notifications (optional)</p>"},{"location":"streaming/#typical-timeline","title":"Typical Timeline","text":"<ol> <li>Friday: Stream topic announced</li> <li>Sunday: Stream day (example schedule)</li> <li>Live: Discord ping when starting</li> <li>Recording: Available on YouTube afterward</li> </ol> <p>Suggest Topics</p> <p>You can suggest stream topics by submitting ideas on Twitter, in blog post comments, or through Discord. Kay often works on community-requested features during streams.</p>"},{"location":"streaming/#interactive-features","title":"Interactive Features","text":""},{"location":"streaming/#live-qa","title":"Live Q&amp;A","text":"<ul> <li>Ask questions in Discord chat</li> <li>Get real-time answers during development</li> <li>Participate in technical discussions</li> </ul>"},{"location":"streaming/#community-input","title":"Community Input","text":"<ul> <li>Suggest features to work on</li> <li>Provide feedback on implementations</li> <li>Help with testing and validation</li> </ul>"},{"location":"streaming/#educational-value","title":"Educational Value","text":"<ul> <li>Learn about Python compiler internals</li> <li>Understand optimization techniques</li> <li>See debugging processes in action</li> <li>Watch code review and refactoring</li> </ul> <p>Join the Community</p> <p>Streaming sessions are a great way to become more involved with the Nuitka project. Whether you're a user, contributor, or just curious about compiler development, everyone is welcome!</p>"},{"location":"support/","title":"Support","text":"<p>If you have an issue or need support for Nuitka, here are your options:</p>"},{"location":"support/#commercial-grade-support","title":"Commercial Grade Support","text":"<p>While Nuitka is Free Software, your software is not, and you want to get help with the tool, somebody to do it for you, or a quick solution, or even better IP protection with more advanced techniques. You are best served in the Nuitka Commercial area.</p> <p>Professional Support</p> <p>For businesses and professional developers who need guaranteed support, SLA agreements, and priority assistance, commercial support provides dedicated expertise and faster resolution times.</p>"},{"location":"support/#github-issue-tracker","title":"GitHub Issue Tracker","text":"<p>Nuitka uses GitHub for public issue tracking (commercial users have a private tracker available) and you can report issues on the issue tracker.</p> <p>Before Creating an Issue</p> <ul> <li>Search existing issues to avoid duplicates</li> <li>Include your Nuitka version and Python version</li> <li>Provide a minimal reproducible example</li> <li>Include relevant error messages and stack traces</li> </ul>"},{"location":"support/#discord-gitter","title":"Discord / Gitter","text":"<p>Try the chat room on Discord, which although not a replacement for an issue tracker, can be used for first contact and questions. It is not an interactive User Manual though. Please refer to that first. You are also welcome to lurk and help others.</p> <p>Join Discord Server</p> <p>Alternatively, you can use the Gitter chat room that mirrors the general Discord chat:</p> <p></p> <p>Chat Guidelines</p> <ul> <li>Be respectful and patient</li> <li>Search message history before asking</li> <li>Provide context when asking questions</li> <li>Help others when you can</li> </ul>"},{"location":"support/#self-help-resources","title":"Self-Help Resources","text":"<p>Before reaching out for support, consider these resources:</p> <ul> <li>User Manual - Comprehensive documentation</li> <li>Common Issues - Solutions to frequent problems</li> <li>Tips &amp; Best Practices - Performance and usage tips</li> <li>Package Configuration - Advanced configuration options</li> </ul>"},{"location":"support/#support-priority","title":"Support Priority","text":"<ol> <li>Check Documentation - Start with the user manual and guides</li> <li>Search Issues - Look for existing solutions on GitHub</li> <li>Community Chat - Ask quick questions on Discord/Gitter</li> <li>Create Issue - For bugs or feature requests</li> <li>Commercial Support - For professional assistance</li> </ol>"},{"location":"tips/","title":"Tips","text":"<p>On this page, you'll find helpful tips and techniques for optimizing your experience with Nuitka. From maximizing compilation efficiency to managing dependencies and runtime considerations.</p>"},{"location":"tips/#nuitka-options-in-code-nuitka-project-options","title":"Nuitka Options in Code (Nuitka Project Options)","text":"<p>You can create a build script or directly track the Nuitka command line options inside the source code. The latter is a much cleaner approach than a build script that constructs a command line to invoke Nuitka and still very powerful.</p> <p>In your build script, you use <code>python -m nuitka some_script.py --output-dir=dist</code> and put only options that are not generally relevant; in the main <code>script.py</code> you have lines like these.</p> <pre><code># The PySide6 plugin covers qt-plugins\n# nuitka-project: --enable-plugin=pyside6\n# nuitka-project: --include-qt-plugins=qml\n</code></pre> <p>You can have conditions, you can evaluate environment variables, you can use locations relative to the main script, and many more things.</p>"},{"location":"tips/#passing-python-command-line-flags","title":"Passing Python Command Line Flags","text":"<p>For passing things like <code>-O</code> or <code>-S</code> to Python, to your compiled program, there is a command line option name <code>--python-flag=</code> which makes Nuitka emulate these options.</p> <p>The most important ones are supported, and we will add more if a use case exists.</p>"},{"location":"tips/#caching-compilation-results","title":"Caching Compilation Results","text":"<p>When invoked with identical input files, the C compiler will take a long time and require a lot of CPU to compile over and over. Make sure to have <code>ccache</code> installed and configured when using gcc. It will make repeated compilations much faster, even if things are not yet perfect, i.e. changes to the program can cause many C files to change, requiring a new compilation instead of using the cached result.</p> WindowsmacOSLinux/Other <p>On Windows, with the included MinGW64 Nuitka supports using <code>ccache.exe</code> and will offer to download from an official source and use it automatically, and using that is recommended for Windows, as other versions are known to very often have severe quality issues; for example, they spuriously cause errors or hang indefinitely or don't work at all.</p> <p>For the MSVC compilers and ClangCL setups, using the <code>clcache</code> is automatic and included in Nuitka.</p> <p>On macOS and Intel, there is an automatic download of a <code>ccache</code> binary from our site. For arm64 arches, it's recommended to use this setup, which installs Homebrew and ccache. Nuitka picks it up automatically if it is on that kind of machine.</p> <pre><code>export HOMEBREW_INSTALL_FROM_API=1\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\neval $(/opt/homebrew/bin/brew shellenv)\nbrew install ccache\n</code></pre> <p>Nuitka will pick up <code>ccache</code> if located in system <code>PATH</code>, and it will also be possible to provide if by setting <code>NUITKA_CCACHE_BINARY</code> to the full path of the binary. This is useful in CI systems where environments might be non-standard.</p>"},{"location":"tips/#controlling-cache-storage-locations","title":"Controlling Cache Storage Locations","text":"<p>The storage for cache results of all kinds, downloads, and cached compilation results from C and Nuitka, is done in a platform-dependent directory as determined by the <code>appdirs</code> package. However, you can override it by setting the environment variable <code>NUITKA_CACHE_DIR</code> to a base directory. This is for use in environments where the home directory does not persist but other paths do.</p> <p>There is also per cache control of these caches. Here is a table of environment variables that you can set before starting the compilation, to make Nuitka store some of these caches in an entirely separate space.</p> Cache name Environment Variable Data Put there downloads NUITKA_CACHE_DIR_DOWNLOADS Downloads made, e.g., dependency walker ccache NUITKA_CACHE_DIR_CCACHE Object files created by gcc clcache NUITKA_CACHE_DIR_CLCACHE Object files created by MSVC bytecode NUITKA_CACHE_DIR_BYTECODE Bytecode of demoted modules dll-dependencies NUITKA_CACHE_DIR_DLL_DEPENDENCIES DLL dependencies"},{"location":"tips/#using-the-correct-nuitka-runner","title":"Using the Correct Nuitka Runner","text":"<p>Avoid running the <code>nuitka</code> binary; doing <code>python -m nuitka</code> will make sure that you are using what you think you are. Using the wrong Python will make it give you <code>SyntaxError</code> or <code>ImportError</code> for installed modules. That happens, when you run Nuitka with Python2 on Python3 code and vice versa. You avoid that issue by explicitly calling the same Python interpreter binary.</p>"},{"location":"tips/#choosing-the-fastest-c-compilers","title":"Choosing the Fastest C Compilers","text":"<p>The fastest binaries of <code>pystone.exe</code> on Windows with 64 bits version of Python proved to be significantly faster with MinGW64, roughly 20% better score. So, it is recommended for use over MSVC. Using <code>clang-cl.exe</code> of Clang was faster than MSVC but still significantly slower than MinGW64 and will be harder to use, so it that's not recommended as well.</p> <p>On Linux, for <code>pystone.bin</code>, the binary produced by <code>clang6</code> was faster than <code>gcc-6.3</code>, but not significantly. Since gcc is more often already installed, it is recommended for use for now.</p> <p>Differences in C compilation times were not examined.</p>"},{"location":"tips/#addressing-unexpected-slowdowns","title":"Addressing Unexpected Slowdowns","text":"<p>Using the Python DLL, as standard CPython does, can lead to unexpected slowdowns, for example in uncompiled code that works with Unicode strings. This is because calling to the DLL rather than residing in the DLL causes overhead, and this even happens to the DLL with itself, being slower, than a Python all contained in one binary.</p> <p>So if feasible, aim at static linking, which is currently only possible with Anaconda Python on non-Windows, Debian Python2, self compiled Pythons (do not activate <code>--enable-shared</code>, not needed), and installs created with <code>pyenv</code>.</p> <p>Anaconda Static Linking</p> <p>On Anaconda, you may need to execute <code>conda install libpython-static</code></p>"},{"location":"tips/#managing-standalone-executables-and-dependencies","title":"Managing Standalone Executables and Dependencies","text":"<p>The process of making standalone executables for Windows traditionally involves using an external dependency walker to copy necessary libraries along with the compiled executables to the distribution folder.</p> <p>There are plenty of ways to find that something is missing. Do not manually copy things into the folder, esp. not DLLs, as that's not going to work. Instead, make bug reports to get these handled by Nuitka properly.</p>"},{"location":"tips/#resolving-windows-resource-update-errors","title":"Resolving Windows Resource Update Errors","text":"<p>On Windows, the Windows Defender tool and the Windows Indexing Service both scan the freshly created binaries, while Nuitka wants to work with it, e.g. adding more resources, and then preventing operations randomly due to holding locks. Make sure to exclude your compilation result directories from these services.</p>"},{"location":"tips/#redistributing-windows-standalone-programs","title":"Redistributing Windows Standalone Programs","text":"<p>Whether compiling with MingW or MSVC, the standalone programs have external dependencies to Visual C Runtime libraries. Nuitka tries to ship those dependent DLLs by copying them from your system.</p> <p>Beginning with Microsoft Windows 10, Microsoft ships <code>ucrt.dll</code> (Universal C Runtime libraries) which handles calls to various C runtime functions.</p>"},{"location":"tutorial-setup-and-build/","title":"Tutorial: Setup and Build","text":"<p>This is basic steps if you have nothing installed, of course if you have any of the parts, just skip it.</p>"},{"location":"tutorial-setup-and-build/#setup","title":"Setup","text":""},{"location":"tutorial-setup-and-build/#install-python","title":"Install Python","text":"<ol> <li> <p>Download and install Python from https://www.python.org/downloads/windows</p> </li> <li> <p>Select one of <code>Windows x86-64 web-based installer</code> (64 bits Python, recommended) or <code>x86 executable</code> (32 bits Python) installer.</p> </li> <li> <p>Verify it's working using command:    <pre><code>python --version\n</code></pre></p> </li> </ol>"},{"location":"tutorial-setup-and-build/#install-nuitka","title":"Install Nuitka","text":"<ol> <li> <p>Install Nuitka using pip:    <pre><code>python -m pip install nuitka\n</code></pre></p> </li> <li> <p>Verify using command:    <pre><code>python -m nuitka --version\n</code></pre></p> </li> </ol>"},{"location":"tutorial-setup-and-build/#write-some-code-and-test","title":"Write some code and test","text":""},{"location":"tutorial-setup-and-build/#create-a-folder-for-the-python-code","title":"Create a folder for the Python code","text":"<ol> <li> <p>Create a directory:    <pre><code>mkdir HelloWorld\n</code></pre></p> </li> <li> <p>Make a Python file named hello.py:</p> </li> </ol> <pre><code>def talk(message):\n    return \"Talk \" + message\n\n\ndef main():\n    print(talk(\"Hello World\"))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial-setup-and-build/#test-your-program","title":"Test your program","text":"<p>Do as you normally would. Running Nuitka on code that works incorrectly is not easier to debug.</p> <pre><code>python hello.py\n</code></pre>"},{"location":"tutorial-setup-and-build/#build-it-using","title":"Build it using","text":"<pre><code>python -m nuitka hello.py\n</code></pre> <p>C Compiler Setup</p> <p>This will prompt you to download a C caching tool (to speed up repeated compilation of generated C code) and a MinGW64 based C compiler, unless you have a suitable MSVC installed. Say <code>yes</code> to both those questions.</p>"},{"location":"tutorial-setup-and-build/#run-it","title":"Run it","text":"<p>Execute the <code>hello.exe</code> created near <code>hello.py</code>.</p>"},{"location":"tutorial-setup-and-build/#distribute","title":"Distribute","text":"<p>To distribute, build with <code>--mode=standalone</code> option, which will not output a single executable, but a whole folder. Copy the resulting <code>hello.dist</code> folder to the other machine and run it.</p> <p>You may also try <code>--onefile</code> which does create a single file, but make sure that the mere standalone is working, before turning to it, as it will make the debugging only harder, e.g. in case of missing data files.</p>"},{"location":"tutorial-setup-and-build/#distribution-examples","title":"Distribution examples","text":"Standalone ModeOnefile ModeApp Bundle (macOS) <pre><code>python -m nuitka --mode=standalone hello.py\n</code></pre> <p>This creates a <code>hello.dist</code> folder containing all dependencies. Copy this entire folder to distribute your application.</p> <pre><code>python -m nuitka --mode=onefile hello.py\n</code></pre> <p>This creates a single executable file that contains everything needed to run your application.</p> <pre><code>python -m nuitka --mode=app hello.py\n</code></pre> <p>This creates a macOS application bundle (.app file).</p> <p>Distribution Best Practices</p> <ul> <li>Always test standalone mode first before trying onefile</li> <li>Include any data files your application needs using <code>--include-data-files</code></li> <li>Test on the target platform before distribution</li> <li>Consider using <code>--include-package-data</code> for package resources</li> </ul>"},{"location":"use-cases/","title":"Use Cases","text":"<p>This page discusses the various use cases of Nuitka, and it is recommended to be read entirely, since the cases build on each other. They will inform your decision on how to use Nuitka for your software.</p>"},{"location":"use-cases/#program-compilation-with-all-modules-embedded-acceleration","title":"Program compilation with all modules embedded (acceleration)","text":"<p>If you want to compile a whole program recursively, and not only the single file that is the main program, do it like this:</p> <pre><code>python -m nuitka --follow-imports program.py\n</code></pre> <p>Note</p> <p>There are more fine-grained controls than <code>--follow-imports</code> available. Consider the output of <code>nuitka --help</code>. Including fewer modules into the compilation, but instead using normal Python for it, will make it faster to compile.</p> <p>In case you have a source directory with dynamically loaded files, i.e. one which cannot be found by recursing after normal import statements via the <code>PYTHONPATH</code> (which would be the recommended way), you can always require that a given directory shall also be included in the executable:</p> <pre><code>python -m nuitka --follow-imports --include-plugin-directory=plugin_dir program.py\n</code></pre> <p>Note</p> <p>If you don't do any dynamic imports, simply setting your <code>PYTHONPATH</code> at compilation time is what you should do.</p>"},{"location":"use-cases/#extension-module-compilation","title":"Extension Module compilation","text":"<p>If you want to compile a single extension module, all you have to do is this:</p> <pre><code>python -m nuitka --module some_module.py\n</code></pre> <p>The resulting file <code>some_module.so</code> can then be used instead of <code>some_module.py</code>.</p> <p>Important</p> <p>The filename of the produced extension module must not be changed as Python insists on a module name derived function as an entry point, in this case <code>PyInit_some_module</code> and renaming the file will not change that. Match the filename of the source code to what the binary name should be.</p>"},{"location":"use-cases/#package-compilation","title":"Package compilation","text":"<p>If you need to compile a whole package and embed all modules, that is also feasible, use Nuitka like this:</p> <pre><code>python -m nuitka --module some_package --include-package=some_package\n</code></pre> <p>Note</p> <p>The inclusion of the package contents needs to be provided manually; otherwise, the package is mostly empty. You can be more specific if you like, and only include part of it, or exclude part of it, e.g. with <code>--nofollow-import-to='*.tests'</code> you would not include the unused test part of your code.</p>"},{"location":"use-cases/#standalone-program-distribution","title":"Standalone Program Distribution","text":"<p>For distribution to other systems, there is the standalone mode, which produces a folder for which you can specify <code>--mode=standalone</code>.</p> <pre><code>python -m nuitka --mode=standalone program.py\n</code></pre> <p>Following all imports is default in this mode. You can selectively exclude modules by specifically saying <code>--nofollow-import-to</code>, but then an <code>ImportError</code> will be raised when import of it is attempted at program run time. This may cause different behavior, but it may also improve your compile time if done wisely.</p> <p>For data files to be included, use the option <code>--include-data-files=&lt;source&gt;=&lt;target&gt;</code> where the source is a file system path, but the target has to be specified relative. For the standalone mode, you can also copy them manually, but this can do extra checks, and for the onefile mode, there is no manual copying possible.</p> <p>To copy some or all file in a directory, use the option <code>--include-data-files=/etc/*.txt=etc/</code> where you get to specify shell patterns for the files, and a subdirectory where to put them, indicated by the trailing slash.</p>"},{"location":"use-cases/#important-warnings","title":"Important Warnings","text":"<p>Nuitka does not consider data files code, do not include DLLs, or Python files as data files, and expect them to work, they will not, unless you really know what you are doing.</p>"},{"location":"user-documentation/","title":"User Documentation","text":"<p>New to Nuitka?</p> <p>Start with the User Manual to understand the fundamentals, then proceed to the Tutorial for hands-on guidance.</p>"},{"location":"user-documentation/#getting-started","title":"Getting Started","text":"<ul> <li> <p> User Manual</p> <p>Essential reading for new users. Learn about Nuitka fundamentals, requirements, installation, and core concepts.</p> <p> Start Reading</p> </li> <li> <p> Tutorial: Setup and Build</p> <p>Step-by-step guidance through your first compilation. From installation to your first executable.</p> <p> Start Tutorial</p> </li> </ul>"},{"location":"user-documentation/#optimization-configuration","title":"Optimization &amp; Configuration","text":"<ul> <li> <p> Tips &amp; Best Practices</p> <p>Proven techniques for maximizing compilation efficiency, managing dependencies, and optimizing runtime performance.</p> <p> Learn Tips</p> </li> <li> <p> Performance Guide</p> <p>Understand performance expectations and how to measure and improve your application's speed.</p> <p> Check Performance</p> </li> <li> <p> Package Configuration</p> <p>Advanced configuration system for extending Nuitka compatibility with third-party packages.</p> <p> Configure Packages</p> </li> </ul>"},{"location":"user-documentation/#use-cases-examples","title":"Use Cases &amp; Examples","text":"Desktop ApplicationsWeb ApplicationsScientific ComputingEnterprise Solutions <p>Perfect for creating standalone desktop applications that users can run without Python installed.</p> <ul> <li>GUI applications (Tkinter, PyQt, PySide)</li> <li>Command-line tools</li> <li>System utilities</li> </ul> <p>Compile web applications and services for easier deployment and better performance.</p> <ul> <li>Flask/Django applications</li> <li>API services</li> <li>Microservices</li> </ul> <p>Accelerate scientific and data processing applications with significant performance gains.</p> <ul> <li>NumPy/SciPy applications</li> <li>Machine learning models</li> <li>Data analysis tools</li> </ul> <p>Deploy enterprise applications with IP protection and commercial support.</p> <ul> <li>Business applications</li> <li>Commercial software</li> <li>Proprietary algorithms</li> </ul> <p> Explore All Use Cases</p>"},{"location":"user-documentation/#troubleshooting-support","title":"Troubleshooting &amp; Support","text":"<p>Need Help?</p> <p>Start with common solutions, then check our support channels if you need additional assistance.</p> <ul> <li> <p> Common Issues</p> <p>Quick solutions for frequently encountered problems during compilation and execution.</p> <p> Find Solutions</p> </li> <li> <p> Community Support</p> <p>Get help from the Nuitka community through various support channels.</p> <p> Get Support</p> </li> </ul> <p>Ready to Start?</p> <p>Begin with the User Manual \u2014 it provides the foundation you need to use Nuitka effectively.</p>"},{"location":"user-manual/","title":"Nuitka User Manual","text":"<p>This page is the recommended first read when you start using Nuitka.</p> <p>This page will teach you more about Nuitka fundamentals and is the recommended first read when you start using Nuitka.</p>"},{"location":"user-manual/#requirements","title":"Requirements","text":"<p>To ensure smooth work of Nuitka, make sure to follow the system requirements that include the following components:</p>"},{"location":"user-manual/#c-compiler","title":"C Compiler","text":"<p>You need a C compiler with support for C11 or for older Python only, a C++ compiler for C++03 <sup>1</sup>.</p> WindowsLinuxmacOSFreeBSDAndroidOther Platforms <p>Use one of the following compilers:</p> <ul> <li>Visual Studio 2022 or higher. Use the default English language pack to enable Nuitka to filter away irrelevant outputs and, therefore, have the best results.</li> </ul> <p>Using <code>--msvc=latest</code> enforces using this compiler.</p> <ul> <li>The MinGW64 compiler (used with <code>--mingw64</code>) option, must be the one Nuitka downloads, and it enforces that because there were frequent breakage with the complete tooling used.</li> </ul> <p>Nuitka will offer to download it unless it finds Visual Studio. Using <code>--mingw64</code> enforces using this compiler.</p> <ul> <li> <p>The Clang-cl compiler can be used if provided by the Visual Studio installer or Using <code>--clang</code> on Windows enforces the one from Visual Studio.</p> </li> <li> <p>The Clang compiler can be used from from the MinGW64 download.</p> </li> </ul> <p>Using <code>--mingw64 --clang</code> enforces using this Clang.</p> <p>Use either the GCC from the system or an installed clang.</p> <p>Use the system Clang compiler. Install XCode via Apple Store to be covered.</p> <p>On most architectures, use Clang or GCC, ideally matching the system compiler.</p> <p>Install the required packages using: <pre><code>pkg install patchelf ccache binutils ldd termux-elf-cleaner\n</code></pre></p> <p>Use the GCC compiler of at least version 5.1 or higher. Use back-ports such as EPEL or SCL.</p>"},{"location":"user-manual/#python","title":"Python","text":"<p>Python 2.7, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13 are supported. If a stable Python release isn't listed here, don't worry; it's being worked on and added as soon as possible.</p> <p>Special cases need 2 Python installations</p> <p>In some scenarios, you might need to download an additional Python version. To get to know more, read the following statements:</p> <ul> <li> <p>If you use Python 3.4, additionally install either Python 2 or Python 3.5+. You will need it during the compile time because SCons (which orchestrates the C compilation) does not support Python 3.4, but Nuitka does for some commercial users targeting Windows XP.</p> </li> <li> <p>If you use the Windows opening system, don't use Python 2 because clcache doesn't work with it. Install Python 3.5+ instead. Nuitka finds these needed Python versions (for example, on Windows via registry); you shouldn't notice that as long as they are installed.</p> </li> <li> <p>Other functionality is only available when another Python installs a specific package. For example, Python2.x can only achieve onefile compression if another Python3 with the zstandard package is available.</p> </li> </ul> <p>Important considerations</p> <ul> <li> <p>Moving binaries to other machines: The created binaries can be made executable independent of the Python installation, with <code>--mode=standalone</code>, <code>--mode=onefile</code>, or <code>--mode=app</code> options, but not with <code>--mode=accelerated</code>.</p> </li> <li> <p>Binary filename suffix: The created binaries have an <code>.exe</code> suffix on Windows. On other platforms, they have either no suffix in standalone mode or the <code>.bin</code> suffix, which you can remove or change with the <code>--output-filename</code> option. Nuitka adds the suffix for onefile and acceleration mode to make sure that the original script name and the binary name cannot ever collide, so we can safely overwrite the binary without destroying the source file.</p> </li> <li> <p>Module mode filenames: Python Extension modules cannot be renamed without breaking them, the filename and the module name have to match, so you must change the source filename to get the desired result.</p> </li> <li> <p>It has to be a standard Python implementation: You need a form of standard Python implementation, called CPython, to execute Nuitka because it's closely tied to the implementation details of it. Ideally, you use the official Python only.</p> </li> <li> <p>Homebrew (for macOS) is supported, but not ideal: The resulting binaries are not as portable and specifically not backward portable.</p> </li> <li> <p>Anaconda Python is supported: The Anaconda distribution is making special adaptations for some <code>conda</code> packages that lead to errors and might have to be reported as issues, such that special treatment can needed, but we add them as soon as they are reported.</p> </li> <li> <p>Python from Microsoft Store: Don't download Python from Microsoft Store, as it doesn't work properly.</p> </li> <li> <p>Pyenv on macOS: It is known that macOS pyenv does not work. Use Homebrew instead for self-compiled Python installations.</p> </li> </ul>"},{"location":"user-manual/#operating-system","title":"Operating System","text":"<p>Nuitka supports the following operating systems: Android, Linux, FreeBSD, NetBSD, OpenBSD, macOS, and Windows (32 bits/64 bits/ARM).</p> <p>The portability of the generated code is excellent. Therefore, other operating systems will work as well.</p> <p>However, specific adjustments might be necessary, such as modifying Nuitka's internal SCons usage or providing additional flags. Ensure that the Python version matches the architecture of the C compiler, or else you will get cryptic error messages.</p>"},{"location":"user-manual/#architecture","title":"Architecture","text":"<p>Supported Architectures are x86, x86_64 (AMD64), and ARM.</p> <p>Nuitka generally does not use any hardware specifics and produces portable C code. Therefore, many other architectures work out of the box as well.</p> <p>Generally, the architectures that Debian or RHEL support can be considered good and tested, too; for example, RISC-V won't pose any issues.</p>"},{"location":"user-manual/#installation","title":"Installation","text":"<p>For most systems, there will be packages on the Download page of Nuitka. You can also install it from the source code via the standard <code>python setup.py install</code> routine or even run it directly from the source without installation.</p>"},{"location":"user-manual/#command-line-usage","title":"Command Line Usage","text":"<p>The recommended way of executing Nuitka is <code>&lt;the_right_python&gt; -m nuitka</code> to be absolutely certain which Python interpreter you are using, so it is easier to match with what Nuitka has.</p> <p>The next best way of executing Nuitka bare that is from a source checkout or archive, with no environment variable changes, most noteworthy, you do not have to mess with <code>PYTHONPATH</code> at all for Nuitka. You just execute the <code>nuitka</code> and <code>nuitka-run</code> scripts directly without any changes to the environment. You may want to add the <code>bin</code> directory to your <code>PATH</code> for your convenience, but that step is optional.</p> <p>Moreover, if you want to execute with the right interpreter, in that case, be sure to execute <code>&lt;the_right_python&gt; bin/nuitka</code> and be good.</p>"},{"location":"user-manual/#pick-the-right-interpreter","title":"Pick the right Interpreter","text":"<p>If you encounter a <code>SyntaxError</code> you absolutely most certainly have picked the wrong interpreter for the program you are compiling.</p> <p>Nuitka has a <code>--help</code> option to output what it can do:</p> <pre><code>python -m nuitka --help\n</code></pre> <p>The <code>nuitka-run</code> command is the same as <code>nuitka</code>, but with a different default. It tries to compile and directly execute a Python script:</p> <pre><code>python -m nuitka --run hello.py\n</code></pre> <p>This option that is different is <code>--run</code>, and passing on arguments after the first non-option to the created binary, so it is somewhat more similar to what plain <code>python</code> will do.</p>"},{"location":"user-manual/#license","title":"License","text":"<p>Nuitka is licensed under the Apache License, Version 2.0; you may not use it except in compliance with the License.</p> <p>You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p> <ol> <li> <p>Support for this C11 is given with GCC 5.1 or higher and all Clang versions. The older MSVC compilers don't do it yet. But as a workaround, with Python 3.10 or older, the C++03 language standard is significantly enough overlapping with C11, such that it is then used instead.\u00a0\u21a9</p> </li> </ol>"},{"location":"website-manual/","title":"Website Manual","text":"<p>This document describes how to maintain and update the Nuitka website.</p>"},{"location":"website-manual/#overview","title":"Overview","text":"<p>The Nuitka website is built using MkDocs with Material theme. This manual covers the process of updating content, adding new pages, and maintaining the site.</p>"},{"location":"website-manual/#content-management","title":"Content Management","text":""},{"location":"website-manual/#adding-new-pages","title":"Adding New Pages","text":"<ol> <li>Create a new markdown file in the <code>docs/</code> directory</li> <li>Add the page to the navigation in <code>mkdocs.yml</code></li> <li>Use appropriate frontmatter and formatting</li> </ol>"},{"location":"website-manual/#updating-existing-content","title":"Updating Existing Content","text":"<ul> <li>Follow the existing structure and style guidelines</li> <li>Test changes locally before deploying</li> <li>Ensure all links work correctly</li> </ul>"},{"location":"website-manual/#deployment","title":"Deployment","text":"<p>The website is automatically deployed when changes are pushed to the main branch.</p>"},{"location":"website-manual/#technical-details","title":"Technical Details","text":"<ul> <li>Framework: MkDocs with Material theme</li> <li>Hosting: [To be determined]</li> <li>Source: [Repository location]</li> </ul>"},{"location":"changelog/changelog-0x/","title":"Nuitka 0.x Changelog","text":"<p>This document contains the changelog for Nuitka 0.x series releases.</p>"},{"location":"changelog/changelog-0x/#version-06x","title":"Version 0.6.x","text":""},{"location":"changelog/changelog-0x/#nuitka-0620","title":"Nuitka 0.6.20","text":"<p>Last release in the 0.6.x series.</p>"},{"location":"changelog/changelog-0x/#version-05x","title":"Version 0.5.x","text":""},{"location":"changelog/changelog-0x/#nuitka-0533","title":"Nuitka 0.5.33","text":"<p>Historical release in the 0.5.x series.</p>"},{"location":"changelog/changelog-0x/#earlier-versions","title":"Earlier Versions","text":"<p>Nuitka has a long development history dating back to early releases.</p> <p>Note</p> <p>For complete historical changelog details, please refer to the official Nuitka repository and git history.</p>"},{"location":"changelog/changelog-1x/","title":"Nuitka 1.x Changelog","text":"<p>This document contains the changelog for Nuitka 1.x series releases.</p>"},{"location":"changelog/changelog-1x/#version-19x","title":"Version 1.9.x","text":""},{"location":"changelog/changelog-1x/#nuitka-198","title":"Nuitka 1.9.8","text":"<p>Final release in the 1.x series.</p>"},{"location":"changelog/changelog-1x/#version-18x","title":"Version 1.8.x","text":""},{"location":"changelog/changelog-1x/#nuitka-184","title":"Nuitka 1.8.4","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-17x","title":"Version 1.7.x","text":""},{"location":"changelog/changelog-1x/#nuitka-1710","title":"Nuitka 1.7.10","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-16x","title":"Version 1.6.x","text":""},{"location":"changelog/changelog-1x/#nuitka-166","title":"Nuitka 1.6.6","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-15x","title":"Version 1.5.x","text":""},{"location":"changelog/changelog-1x/#nuitka-157","title":"Nuitka 1.5.7","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-14x","title":"Version 1.4.x","text":""},{"location":"changelog/changelog-1x/#nuitka-148","title":"Nuitka 1.4.8","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-13x","title":"Version 1.3.x","text":""},{"location":"changelog/changelog-1x/#nuitka-137","title":"Nuitka 1.3.7","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-12x","title":"Version 1.2.x","text":""},{"location":"changelog/changelog-1x/#nuitka-127","title":"Nuitka 1.2.7","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-11x","title":"Version 1.1.x","text":""},{"location":"changelog/changelog-1x/#nuitka-119","title":"Nuitka 1.1.9","text":"<p>Bug fixes and improvements.</p>"},{"location":"changelog/changelog-1x/#version-10x","title":"Version 1.0.x","text":""},{"location":"changelog/changelog-1x/#nuitka-108","title":"Nuitka 1.0.8","text":"<p>First stable 1.0 release.</p> <p>Note</p> <p>For complete changelog details, please refer to the official Nuitka repository.</p>"},{"location":"changelog/changelog-2x/","title":"Nuitka 2.x Changelog","text":"<p>This document contains the changelog for Nuitka 2.x series releases.</p>"},{"location":"changelog/changelog-2x/#version-27x","title":"Version 2.7.x","text":""},{"location":"changelog/changelog-2x/#nuitka-276","title":"Nuitka 2.7.6","text":"<p>Bug fixes and improvements for the 2.7 series.</p>"},{"location":"changelog/changelog-2x/#nuitka-275","title":"Nuitka 2.7.5","text":"<p>Bug fixes and improvements for the 2.7 series.</p>"},{"location":"changelog/changelog-2x/#nuitka-274","title":"Nuitka 2.7.4","text":"<p>Bug fixes and improvements for the 2.7 series.</p>"},{"location":"changelog/changelog-2x/#nuitka-273","title":"Nuitka 2.7.3","text":"<p>Bug fixes and improvements for the 2.7 series.</p>"},{"location":"changelog/changelog-2x/#nuitka-272","title":"Nuitka 2.7.2","text":"<p>Bug fixes and improvements for the 2.7 series.</p>"},{"location":"changelog/changelog-2x/#nuitka-271","title":"Nuitka 2.7.1","text":"<p>Bug fixes and improvements for the 2.7 series.</p>"},{"location":"changelog/changelog-2x/#nuitka-270","title":"Nuitka 2.7.0","text":"<p>Major release with significant improvements.</p>"},{"location":"changelog/changelog-2x/#version-26x","title":"Version 2.6.x","text":""},{"location":"changelog/changelog-2x/#nuitka-260","title":"Nuitka 2.6.0","text":"<p>Previous stable release.</p> <p>Note</p> <p>For complete changelog details, please refer to the official Nuitka repository.</p>"},{"location":"changelog/current/","title":"Release Information","text":"<p>This page provides access to all release information for Nuitka.</p>"},{"location":"changelog/current/#current-release-information","title":"Current Release Information","text":""},{"location":"changelog/current/#roadmap","title":"Roadmap","text":"<p>This is the roadmap of Nuitka, where we want to be in the next couple of releases.</p>"},{"location":"changelog/current/#upcoming-release","title":"Upcoming Release","text":"<p>Read about changes for the upcoming release, which also includes hotfix information for the current release.</p>"},{"location":"changelog/current/#current-release","title":"Current Release","text":"<p>Read about changes from the current release of Nuitka.</p>"},{"location":"changelog/current/#version-1x-series","title":"Version 1.x Series","text":"<p>Changes for the 1.x major release series.</p>"},{"location":"changelog/current/#version-0x-series","title":"Version 0.x Series","text":"<p>Changes for the 0.x major release series.</p>"},{"location":"changelog/next/","title":"Upcoming Release","text":"<p>This document outlines the changes and ongoing development for the upcoming Nuitka release, serving as a draft changelog. It also includes details on hot-fixes applied to the current stable release.</p>"},{"location":"changelog/next/#nuitka-release-draft","title":"Nuitka Release (Draft)","text":"<p>Note</p> <p>These are the draft release notes for Nuitka. A primary goal for this version is to deliver significant enhancements in scalability.</p> <p>Development is ongoing, and this documentation might lag slightly behind the latest code changes.</p>"},{"location":"changelog/next/#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>Standalone: For the \"Python Build Standalone\" flavor ensured that debug builds correctly recognize all their specific built-in modules, preventing potential errors. (Fixed in 2.7.2 already.)</p> </li> <li> <p>Linux: Fixed a crash when attempting to modify the RPATH of statically linked executables (e.g., from <code>imageio-ffmpeg</code>). (Fixed in 2.7.2 already.)</p> </li> <li> <p>Anaconda: Updated <code>PySide2</code> support to correctly handle path changes in newer Conda packages and improved path normalization for robustness. (Fixed in 2.7.2 already.)</p> </li> <li> <p>macOS: Corrected handling of <code>QtWebKit</code> framework resources. Previous special handling was removed as symlinking is now default, which also resolved an issue of file duplication. (Fixed in 2.7.2 already.)</p> </li> <li> <p>Debugging: Resolved an issue in debug builds where an incorrect assertion was done during the addition of distribution metadata. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Module: Corrected an issue preventing <code>stubgen</code> from functioning with Python versions earlier than 3.6. (Fixed in 2.7.1 already.)</p> </li> <li> <p>UI: Prevented Nuitka from crashing when <code>--include-module</code> was used with a built-in module. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Module: Addressed a compatibility issue where the <code>code</code> mode for the constants blob failed with the C++ fallback. This fallback is utilized on very old GCC versions (e.g., default on CentOS7), which are generally not recommended. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Standalone: Resolved an assertion error that could occur in certain Python setups due to extension module suffix ordering. The issue involved incorrect calculation of the derived module name when the wrong suffix was applied (e.g., using <code>.so</code> to derive a module name like <code>gdbmmodule</code> instead of just <code>gdbm</code>). This was observed with Python 2 on CentOS7 but could potentially affect other versions with unconventional extension module configurations. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Python 3.12.0: Corrected the usage of an internal structure identifier that is only available in Python 3.12.1 and later versions. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Plugins: Prevented crashes in Python setups where importing <code>pkg_resources</code> results in a <code>PermissionError</code>. This typically occurs in broken installations, for instance, where some packages are installed with root privileges. (Fixed in 2.7.1 already.)</p> </li> <li> <p>macOS: Implemented a workaround for data file names that previously could not be signed within app bundles. The attempt in release 2.7 to sign these files inadvertently caused a regression for cases involving illegal filenames. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Python 2.6: Addressed an issue where <code>staticmethod</code> objects lacked the <code>__func__</code> attribute. Nuitka now tracks the original function as a distinct value. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Corrected behavior for <code>orderedset</code> implementations that lack a <code>union</code> method, ensuring Nuitka does not attempt to use it. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Python 2.6: Ensured compatibility for setups where the <code>_PyObject_GC_IS_TRACKED</code> macro is unavailable. This macro is now used beyond assertions, necessitating support outside of debug mode. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Python 2.6: Resolved an issue caused by the absence of <code>sys.version_info.releaselevel</code> by utilizing a numeric index instead and adding a new helper function to access it. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Module: Corrected the <code>__compiled__.main</code> value to accurately reflects the package in which a module is loaded, this was not the case for Python versions prior to 3.12. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Plugins: Further improved the <code>dill-compat</code> plugin by preventing assertions related to empty annotations and by removing hard-coded module names for greater flexibility. (Fixed in 2.7.1 already.)</p> </li> <li> <p>Windows: For onefile mode using DLL mode, ensure all necessary environment variables are correctly set for <code>QtWebEngine</code>. Previously, default Qt paths could point incorrectly near the onefile binary. (Fixed in 2.7.3 already.)</p> </li> <li> <p>PySide6: Fixed an issue with <code>PySide6</code> where slots defined in base classes might not be correctly handled, leading to them only working for the first class that used them. (Fixed in 2.7.3 already.)</p> </li> <li> <p>Plugins: Enhanced Qt binding plugin support by checking for module presence without strictly requiring metadata. This improves compatibility with environments like Homebrew or <code>uv</code> where package metadata might be absent. (Fixed in 2.7.3 already.)</p> </li> <li> <p>macOS: Ensured the <code>apple</code> target is specified during linking to prevent potential linker warnings about using an <code>unknown</code> target in certain configurations. (Fixed in 2.7.3 already.)</p> </li> <li> <p>macOS: Disabled the use of static <code>libpython</code> with <code>pyenv</code> installations, as this configuration is currently broken. (Fixed in 2.7.3 already.)</p> </li> <li> <p>macOS: Improved error handling for the <code>--macos-app-protected-resource</code> option by catching cases where a description is not provided. (Fixed in 2.7.3 already.)</p> </li> <li> <p>Plugins: Enhanced workarounds for <code>PySide6</code>, now also covering single-shot timer callbacks. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Plugins: Ensured that the Qt binding module is included when using accelerated mode with Qt bindings. (Fixed in 2.7.4 already.)</p> </li> <li> <p>macOS: Avoided signing through symlinks and minimized their use to prevent potential issues, especially during code signing of application bundles. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Windows: Implemented path shortening for paths used in onefile DLL mode to prevent issues with long or Unicode paths. This also benefits module mode. (Fixed in 2.7.4 already.)</p> </li> <li> <p>UI: The options nanny plugin no longer uses a deprecated option for macOS app bundles, preventing potential warnings or issues. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Plugins: Ensured the correct macOS target architecture is used. This particularly useful for <code>PySide2</code> with universal CPython binaries, to prevent compile time crashes e.g. when cross-compiling for a different architecture. (Fixed in 2.7.4 already.)</p> </li> <li> <p>UI: Fixed a crash that occurred on macOS if the <code>ccache</code> download was rejected by the user. (Fixed in 2.7.4 already.)</p> </li> <li> <p>UI: Improved the warning message related to macOS application icons for better clarity. (Added in 2.7.4 already.)</p> </li> <li> <p>Standalone: Corrected an issue with QML plugins on macOS when using newer <code>PySide6</code> versions. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Python 3.10+: Fixed a memory leak where the matched value in pattern matching constructs was not being released. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Python3: Fixed an issue where exception exits for larger <code>range</code> objects, which are not optimized away, were not correctly annotated by the compiler. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Windows: Corrected an issue with the automatic use of icons for <code>PySide6</code> applications on non-Windows, if Windows icon options were used. (Fixed in 2.7.4 already.)</p> </li> <li> <p>Onefile: When using DLL mode there was a load error for the DLL with MSVC 14.2 or earlier, but older MSVC is to be supported. (Fixed in 2.7.5 already.)</p> </li> <li> <p>Onefile: Fix, the splash screen was showing in DLL mode twice or more, these extra copies couldn't be stopped. (Fixed in 2.7.5 already.)</p> </li> <li> <p>Standalone: Fixed an issue where data files were no longer checked for conflicts with included DLLs. The order of data file and DLL copying was restored, and macOS app signing was made a separate step to remove the order dependency. (Fixed in 2.7.6 already.)</p> </li> </ul>"},{"location":"changelog/roadmap/","title":"Nuitka Roadmap","text":"<p>This is the Nuitka roadmap, broken down by features.</p>"},{"location":"changelog/roadmap/#user-extensibility","title":"User Extensibility","text":"<ul> <li>Data files, implicit imports, and DLL inclusion are specified in Yaml files now.</li> </ul> <p>A post series is currently going on and has been launched at post: Nuitka Package Config Kickoff and it will continue to improve the documentation that currently lives under Nuitka Package Config on the web site only for rapid development independent of Nuitka releases.</p> <p>The long term plan is to also include in the Nuitka release as part of the documentation, much like User Manual and Developer Manual, that are being maintained inside Nuitka repo.</p> <p>The standard Yaml files (if modified) should be checked at runtime of Nuitka, for that we need to add some kind of checksum to it to detect modification and issue a warning, if <code>jsonschema</code> is not available for modification. Vendoring it seems unnecessarily much effort, and it's in <code>requirements-devel.txt</code> anyway.</p> <p>Currently the checksums are added in the commit hook, but they are not checked at runtime. We might want to limit checking to only used configuration entries.</p>"},{"location":"changelog/roadmap/#onefile-speed-standard","title":"Onefile speed (standard)","text":"<ul> <li>Use Windows NTFS and macOS HFS extended attributes to store caching status of a file inside of it. It might be possible to detect modification of the file in this way and spare us the checksum, which will then be used only in case of a fallback being necessary.</li> </ul> <p>Example code for Windows can be found here: https://github.com/microsoft/Windows-classic-samples/blob/main/Samples/Win7Samples/winui/shell/appplatform/PropertyEdit/PropertyEdit.cpp</p> <ul> <li> <p>All files are compressed individually, we might then be able to cache the result of a specific file, such that files from the Python installation do not have to be redone over and over.</p> </li> <li> <p>Write payload files as memory mapped too, that too should be faster.</p> </li> </ul>"},{"location":"changelog/roadmap/#python-311","title":"Python 3.11","text":"<ul> <li> <p>Attribute lookups for types with a generic one need to update that code path, they will be much slower in 3.11 until we do that. That breaks the performance. We want to cleanup the code, potentially sharing improvements by generating code variants rather that duplicating stuff.</p> </li> <li> <p>Nested async compressions are not yet fully compatible, some newly allowed, strange forms, are failing <code>test_testcoroutines</code> and need to be supported eventually, although real code is very unlikely to encounter it.</p> </li> </ul>"},{"location":"changelog/roadmap/#python-312","title":"Python 3.12","text":"<ul> <li> <p>Use special code for 2 digits code in the long operation templates. Currently only single digit is optimized, but with Python 3.12, we can do better now.</p> </li> <li> <p>Add support for generic classes, these are not yet implemented which is not acceptable mid-term.</p> </li> </ul>"},{"location":"changelog/roadmap/#python-313","title":"Python 3.13","text":"<ul> <li>The No-GIL variant of Python 3.13 is not currently working with Nuitka and needs more work. Right now it seems we cannot import <code>inspect</code> without crashing, we need to audit data structures for more issues like one we found with list data allocations.</li> </ul>"},{"location":"changelog/roadmap/#nuitka-python-standard","title":"Nuitka-Python (standard)","text":"<p>This is currently under way and not yet described here. The current Nuitka release has support for using it. Most work is focused on the aim of getting it capable to statically compile, avoiding extension modules and DLL usages.</p>"},{"location":"changelog/roadmap/#scalability-standard","title":"Scalability (standard)","text":"<ul> <li>More compact code objects handling</li> </ul> <p>Code objects and their creation is among the oldest code in Nuitka and lacks 2 features. First, their creation cannot be delayed, so they consume memory even if never used and module load time as well.</p> <p>We have since began to create constants from binary blobs. These too are also always created before use, but in some cases, we want to become able to delay this step.</p> <p>!!! note       As of Nuitka 2.6, there is an experimental flag to enable these, and we need to switch over to using it.</p> <ul> <li>Enhanced tracing of loop exit merges</li> </ul> <p>Tracing of exception exits is not done for function exits and module exits at this time, meaning that the most merge intensive form of tracing is not applied. However, with a for loop, and a bunch of code on the inside, even if the actual exception exit doesn't matter much more than if it happens at all, or for only very few variables (iterated, iterated value, etc.) causes a full blown tracing to be done. Experiments have shown, that this for some modules causing a 40% increase of work to do, and providing the most complex merges to be done, which end up being used.</p> <ul> <li>More scalable class creation</li> </ul> <p>For class creation, we have a bunch of complexity. We cannot decide easily if a class dictionary (while being in the class scope) is a normal dict, or at least well behaving like it, or if it's some sort of magic thing that changes all your assignments to something else, and won't allow reading them back, etc. as all of that happens potentially.</p>"},{"location":"changelog/roadmap/#performance-standard","title":"Performance (standard)","text":"<ul> <li>Dual types</li> </ul> <p>After recent improvements, loop analysis became strong enough to trace the types of loop variables, when integer operations are used to increment them, but not if they come out of iterators. That should be added.</p> <ul> <li>Function inlining</li> </ul> <p>There is dead code in Nuitka capable of inlining functions, but it is not used. It should be used on the complex call helpers when arguments are constant, maybe even with hints towards loop unrolling, where there are loops e.g. over dictionaries.</p> <ul> <li>Static metaclass and class dictionaries for Python3</li> </ul> <p>Changes in 1.5 allow this for the case of no base class being specified. But if even only <code>object</code> is given a base class, then it changes to not being compile time resolved.</p>"},{"location":"changelog/roadmap/#macos-enhancements","title":"macOS enhancements","text":"<ul> <li>While <code>arm64</code> (M1) only builds and <code>x86_64</code> (Intel) only builds work, the value <code>universal</code> which of course implies twice the size, and as such has other disadvantages, is not yet supported.</li> </ul>"},{"location":"changelog/roadmap/#container-builds-public-commercial","title":"Container Builds (public + commercial)","text":"<p>Providing containers with old Linux, and optimally compiled CPython with <code>podman</code> such that building with Nuitka on Fedora latest and Ubuntu latest can be done fully automatically and still run on very old Linux.</p>"},{"location":"changelog/roadmap/#automatic-updates","title":"Automatic Updates","text":"<p>The running application needs to check for updates, and update itself automatically, optionally after user prompt, on a restart, or after successful update.</p> <p>This has been implemented for onefile mode only. Unfortunately that is not good for macOS which often require app mode, i.e. standalone mode effectively with more than a single file.</p>"},{"location":"changelog/roadmap/#traceback-encryption-commercial","title":"Traceback Encryption (commercial)","text":"<ul> <li> <p>Right now tracebacks are entirely encrypted. But in a future update, you can decide which information is transferred, and what information is part of the encryption, and which part is not, e.g. hostname, client name, etc. could be output in plain text, while the variable names and values would not be, depending on your choice!</p> </li> <li> <p>Dejong Stacks: More robust parser that allows stdout and stderr in same file with mixed outputs.</p> </li> </ul>"},{"location":"changelog/roadmap/#features-to-be-added-for-nuitka-28","title":"Features to be added for Nuitka 2.8","text":"<ul> <li> Activate more scalable code objects handling</li> <li> Enhanced tracing of loop exit merges</li> <li> More scalable class creation</li> </ul>"},{"location":"changelog/roadmap/#features-to-be-added-for-nuitka-29","title":"Features to be added for Nuitka 2.9","text":"<ul> <li> Use performance potential for attribute access with Python 3.11 version.</li> <li> Document commercial file embedding publicly with examples.</li> <li> Document commercial Windows Service usage with examples.</li> <li> Document traceback encryption usage with examples.</li> </ul>"},{"location":"changelog/roadmap/#features-to-be-added-for-nuitka-30","title":"Features to be added for Nuitka 3.0","text":"<ul> <li> Initial support for ctypes based direct calls of C code.</li> <li> Tuple unpacking for values that support indexing should be optimized.</li> <li> Add download updating for standalone as well, onefile for windows works.</li> </ul>"},{"location":"commercial/nuitka-vm/","title":"Nuitka VM","text":"<p>Nuitka can be used together with other software that does VM level protection. Right now, the offer available is Themida and WinLicense. Both are Oreans products, for which Nuitka VM supports automatic and transparent use.</p> <p>VM Protection</p> <p>Nuitka VM provides the highest level of protection by combining Python compilation with virtual machine technology.</p> <p>WinLicense Features</p> <p>WinLicense combines the same protection level as Themida with the power of advanced license control, offering the most powerful and flexible technology that allows developers to distribute securely trial and registered versions of their applications.</p> <p>Current Limitations</p> <ul> <li>Only works on Windows; for other platforms, we are looking into alternative tools.</li> </ul>"},{"location":"commercial/nuitka-vm/#what-is-themida","title":"What is Themida?","text":"<p>Themida is an SDK where normally you manually modify the C code with macros, that then when compiled, end up as DLL usages for a special DLL. In a next step, it then modifies the created binary and applies VM protection according to settings and those macros, can be using multiple VMs for different code, checks for running a debugger, etc.</p> <p>Nuitka VM adds the ability to do this directly in the Python code instead, which is far more convenient of course. Also, the configuration and handling of Themida and WinLicense is automatic.</p>"},{"location":"commercial/nuitka-vm/#features","title":"Features","text":""},{"location":"commercial/nuitka-vm/#file-embedding","title":"File Embedding","text":"<p>While Nuitka commercial already allows the embedding of data files, with Nuitka VM and Themida/WinLicense, it is also possible to embed the CPython DLL extension modules, and DLLs used by it into one single binary. That, on its own, is making it much harder to attack with file replacements, editing of data files, but there is still the possibility of switching the DLLs.</p> <p>With Nuitka VM and Themida/WinLicense your binary is one file exactly, but without the Nuitka <code>--onefile</code> binary that unpacks the final executable and DLLs to a temporary folder, that then does not protect those files. But Nuitka Themida makes it impossible to access these files.</p>"},{"location":"commercial/nuitka-vm/#enhanced-anti-debugger","title":"Enhanced Anti-Debugger","text":"<p>Nuitka commercial has its own <code>anti-debugger</code> plugin, currently not listed as an official feature. But Themida has the more advanced protection at this time.</p>"},{"location":"commercial/nuitka-vm/#c-macros-in-python-code","title":"C Macros in Python Code","text":"<p>This code example using the VM Tiger Red, there is a large variety of VMs available, with different properties, they all work in the same way to be activated for a piece of code.</p> <pre><code>def sensitiveCode():\n\n  something_that_prepares_but_is_not_critical\n  ...\n\n  # This unused variable is harmless in Python, when compiled with Nuitka it is\n  # inserted as C code in the correct spot.\n  _inject_c_code = \"\"\"\n     VM_TIGER_RED_START;\n     int my_value = 0;\n     // Check for effective protection.\n     CHECK_PROTECTION(my_value, 1);\n     if (my_value != 1) {\n        exit(1);\n     }\n\n     // Check for a debugger.\n     CHECK_DEBUGGER(my_value, 2);\n     if (my_value != 2) {\n        exit(2);\n     }\n  \"\"\"\n\n  secret_calculation = ...\n\n  _inject_c_code = \"\"\"\n     VM_TIGER_RED_END;\n  \"\"\"\n</code></pre>"},{"location":"commercial/nuitka-vm/#full-themida-and-winlicense-power","title":"Full Themida and WinLicense Power","text":"<p>Contained in Nuitka VM is a default configuration, that is used for building your Python program. The defaults are considered to be good, but you can choose to edit this by simply executing e.g.</p> <pre><code>themida.exe .\\nuitka\\plugins\\commercial\\ThemidaPlugin\\config.tmd\n</code></pre> <p>You can then provide your own options. You do not have to configure anything in terms of includes files, used VMs, etc. Nuitka handles that all automatically for you, and this for curious and advanced users only.</p>"},{"location":"commercial/nuitka-vm/#pricing","title":"Pricing","text":"<p>Oreans charges differently for single develop and team licenses. Also with WinLicense, you get to use their C API to check license status at a higher price.</p> Product Oreans Price Nuitka Themida Combined Themida Developer \u20ac199 \u20ac500 \u20ac699 Themida Company \u20ac399 \u20ac500 \u20ac899 WinLicense Developer \u20ac399 \u20ac500 \u20ac899 WinLicense Company \u20ac799 \u20ac500 \u20ac1299 <p>Licensing Requirements</p> <ul> <li>At this price, Nuitka Services cannot handle trial versions.</li> <li>You need to own a Themida or WinLicense license, that you can purchase from Oreans Themida separately.</li> </ul>"},{"location":"commercial/nuitka-vm/#purchase","title":"Purchase","text":"<p>Purchase Nuitka Themida</p> <p>\u20ac 500 / yr</p> <ul> <li>Nuitka Commercial included</li> <li>Nuitka Priority included</li> </ul> <p>External License Required</p> <p>Remember that you also need to purchase the Themida or WinLicense from Oreans separately.</p>"},{"location":"commercial/purchase/","title":"Purchase Nuitka Commercial","text":"<p>Thank you for choosing Nuitka Commercial. You gain the best protected Python compilation for your business while directly supporting the development of this important open-source project.</p> <p>Investment in Excellence</p> <p>Your purchase ensures continued innovation in Python compilation technology and provides you with enterprise-grade tools and support.</p>"},{"location":"commercial/purchase/#available-packages","title":"Available Packages","text":"<p>Choose the Nuitka Commercial package that best fits your development needs and business requirements. Each package is designed for different use cases, from individual developers to large enterprises.</p> <ul> <li> <p> Nuitka Commercial</p> <p>\u20ac250 per year</p> <p>Target Users: Individual developers and small teams</p> <p>Key Features: - Commercial IP protection for your code - Unlimited commercial applications - Standard email support - Regular feature updates</p> <p>Best For: Independent developers and small teams needing professional Python compilation with IP protection.</p> <p>Subscribe Now via Stripe</p> </li> <li> <p> Full Package</p> <p>\u20ac400 per year</p> <p>Target Users: Growing organizations and development teams</p> <p>Key Features: - Everything in Commercial - Priority technical support - Enhanced communication channels - Performance optimization assistance</p> <p>Best For: Organizations that need enhanced support and priority treatment for their development needs.</p> <p>Subscribe Now via Stripe</p> </li> <li> <p> Enterprise Sponsor</p> <p>\u20ac1,000 per year</p> <p>Target Users: Large enterprises with mission-critical applications</p> <p>Key Features: - Everything in Full Package - Roadmap influence and feature prioritization - Direct developer access - Enterprise SLA with guaranteed response times - Critical use case implementation priority</p> <p>Best For: Enterprises whose operations depend on Nuitka, requiring maximum support and development influence.</p> <p>Subscribe Now via Stripe</p> </li> <li> <p> Nuitka Themida Edition</p> <p>\u20ac500 per year</p> <p>Target Users: Applications requiring maximum code protection</p> <p>Key Features: - Advanced Themida integration - Complete Commercial feature set - Priority support for protection issues - Advanced anti-debugging capabilities</p> <p>Best For: Applications requiring the highest level of code protection using advanced anti-reverse engineering techniques.</p> <p>Subscribe Now via Stripe</p> </li> </ul> <p>Package Information</p> <ul> <li>All packages include unlimited commercial use across your projects</li> <li>Automatic annual renewal with easy cancellation options</li> <li>30-day money-back guarantee if not satisfied</li> <li>Secure payment processing through Stripe</li> </ul>"},{"location":"commercial/purchase/#payment-information","title":"Payment Information","text":"<p>Secure Payment Processing</p> <p>All payments are processed securely through Stripe, supporting multiple payment methods including credit cards, bank transfers, SEPA debit, and more.</p>"},{"location":"commercial/purchase/#payment-features","title":"Payment Features:","text":"<ul> <li> Secure Processing \u2014 Bank-level security with Stripe</li> <li> Automatic Renewals \u2014 Never lose access to features</li> <li> Easy Cancellation \u2014 Cancel anytime, no questions asked</li> <li> Tax Compliant \u2014 Proper invoicing for business expenses</li> </ul>"},{"location":"commercial/purchase/#getting-started-after-purchase","title":"Getting Started After Purchase","text":"Immediate AccessTeam SetupInstallation <p>Within Minutes</p> <ul> <li> Confirmation email from Stripe</li> <li> Access to private <code>Nuitka-commercial</code> repository</li> <li> Support channels activation</li> </ul> <p>For Organizations</p> <ul> <li> Add team members via GitHub</li> <li> Organization access tokens</li> <li> Centralized license management</li> </ul> <p>Getting Running</p> <ul> <li> Download from private repository</li> <li> Drop-in replacement for standard Nuitka</li> <li> Immediate access to commercial features</li> </ul> <p>Easy Installation</p> <p>Nuitka Commercial is a drop-in replacement for standard Nuitka with additional features and options. Simply replace your existing Nuitka installation and start using the enhanced capabilities immediately.</p>"},{"location":"commercial/purchase/#common-questions","title":"Common Questions","text":"Can I upgrade or downgrade my subscription? <p>Yes! You can change your subscription tier at any time through the Stripe customer portal. Changes take effect at your next billing cycle.</p> What happens if I cancel? <p>You retain access until the end of your current billing period. After that, you'll lose access to commercial features but can continue using standard Nuitka.</p> Do you offer refunds? <p>We offer a 30-day money-back guarantee if you're not satisfied with your purchase.</p> Can I get a quote for multiple licenses? <p>For volume licensing or custom arrangements, please contact us directly.</p>"},{"location":"commercial/purchase/#need-assistance","title":"Need Assistance?","text":"<ul> <li> <p> Learn More</p> <p>Explore detailed feature comparisons and use cases.</p> <p>Commercial Features</p> </li> <li> <p> Get Support</p> <p>Find help through our various support channels.</p> <p>Support Options</p> </li> <li> <p> Contact Sales</p> <p>Speak directly with our team about your needs.</p> <p>Contact Form</p> </li> </ul> <p>Ready to Get Started?</p> <p>Choose the package that best fits your needs above and start protecting your Python applications today!</p>"},{"location":"commercial/resellers/","title":"Reseller Information","text":"<p>Welcome to the Nuitka Commercial Reseller Program. We value our partnerships and have designed this comprehensive guide to support your success in bringing Nuitka's enterprise-grade Python compilation solutions to your customers.</p> <p>Partnership Welcome</p> <p>Thank you for joining our reseller network. This page contains everything you need to effectively sell and support Nuitka Commercial products.</p>"},{"location":"commercial/resellers/#available-products","title":"Available Products","text":"<p>We offer two premium Nuitka Commercial packages designed for different enterprise needs. Each package provides comprehensive Python compilation solutions with varying levels of support and features.</p> <ul> <li> <p> Nuitka Full Package</p> <p>\u20ac400 per year</p> <p>Target Market: Growing organizations and development teams</p> <p>Key Features: - Complete Nuitka Commercial feature set - Priority technical support - Enhanced communication channels - Performance optimization assistance</p> <p>Customer Value: Professional Python compilation with enterprise support at an accessible price point.</p> <p>Reseller Purchase Link</p> </li> <li> <p> Nuitka Enterprise Sponsor</p> <p>\u20ac1,000 per year</p> <p>Target Market: Large enterprises with mission-critical applications</p> <p>Key Features: - Everything in Full Package - Roadmap influence and feature prioritization - Direct developer access - Enterprise SLA with guaranteed response times - Critical use case implementation priority</p> <p>Customer Value: Maximum support and influence for organizations that depend on Nuitka for core operations.</p> <p>Reseller Purchase Link</p> </li> </ul> <p>Pricing Information</p> <ul> <li>No reseller discounts are available</li> <li>Prices are fixed in EUR and remain stable throughout your sales process</li> <li>All payments processed securely through Stripe</li> <li>Multiple payment methods accepted (credit card, bank transfer, SEPA)</li> </ul>"},{"location":"commercial/resellers/#sales-guidance","title":"Sales Guidance","text":""},{"location":"commercial/resellers/#nuitka-full-package-recommended-for","title":"Nuitka Full Package - Recommended for:","text":"<ul> <li>Small to medium development teams (5-50 developers)</li> <li>Growing companies adopting Python compilation</li> <li>Organizations needing reliable commercial support</li> <li>Projects requiring IP protection without maximum urgency</li> </ul>"},{"location":"commercial/resellers/#nuitka-enterprise-sponsor-recommended-for","title":"Nuitka Enterprise Sponsor - Recommended for:","text":"<ul> <li>Large enterprises with Python-dependent operations</li> <li>Organizations needing guaranteed response times</li> <li>Companies wanting to influence product roadmap</li> <li>Mission-critical applications requiring immediate support</li> </ul>"},{"location":"commercial/resellers/#reseller-faq","title":"Reseller FAQ","text":"How do I place an order? <p>You can place an order anytime via the links above. The price will remain throughout your offer process. Should a price change between the time you made an offer to the end customer and them accepting it and your attempt to execute it, we will give you the old price.</p> Do subscriptions automatically renew? <p>The links given are for subscriptions that do not automatically re-new. As the reseller, you are supposed to get in contact with the end customer at the end of their one year term and make an offer for renewal.</p> <p>We will also inform them, and cancel their access if this process fails.</p> What is your return policy? <p>All sales are final. We do not offer returns or refunds.</p> What marketing materials are available to me? <p>Here are some marketing materials that you can use to promote our products:</p> <ul> <li>Nuitka Commercial Features</li> <li>Logo files</li> </ul> How is the product delivered to the customer? <p>The product is delivered digitally directly to the customer. They will receive:</p> <ul> <li>Access to the Nuitka Commercial repository</li> <li>Direct support via email</li> </ul> Do end customers need to sign any contracts? <p>No, end customers do not need to sign any contracts.</p> When will invoices be delivered? <p>Invoices will be delivered after purchase.</p> When will the product be delivered? <p>The product will be delivered after purchase only.</p> Are there any trials available? <p>No, we do not offer trials at this time.</p>"},{"location":"commercial/resellers/#additional-resources","title":"Additional Resources","text":"<ul> <li>Product Catalog: Available upon request</li> <li>Technical Documentation: Nuitka Commercial Features</li> </ul>"},{"location":"commercial/resellers/#contact-information","title":"Contact Information","text":"<p>Primary Contact: - Name: Kay Hayen - Email: kay@nuitka.net</p>"},{"location":"commercial/resellers/#company-information","title":"Company Information","text":"Detail Information Company Legal Name Nuitka Services Country Germany Tax ID 34185/34910 VAT ID DE358838909 Primary Contact Kay Hayen Job Title Sole Owner Email kay@nuitka.net <p>Thank you for your partnership!</p> <p>Nuitka Services</p> <p>Need More Information?</p> <p>If you can't find what you're looking for here, please reach out to your dedicated contact or our general support team.</p>"},{"location":"news/all-in-with-nuitka/","title":"All In With Nuitka","text":"<p>This is a news article about Nuitka developments and community updates.</p>"},{"location":"news/all-in-with-nuitka/#recent-developments","title":"Recent Developments","text":"<ul> <li>Performance improvements</li> <li>New features added</li> <li>Community growth</li> </ul>"},{"location":"news/all-in-with-nuitka/#whats-next","title":"What's Next","text":"<p>Look forward to more exciting updates in future releases.</p> <p>date: 2022-12-09 authors:   - kay-hayen categories:   - announcements   - community</p>"},{"location":"news/all-in-with-nuitka/#all-in-with-nuitka_1","title":"All in with Nuitka","text":"<p>After more than 10 years of working on the Python compiler Nuitka, and at the age of 50, I have finally decided to take the plunge. My projects \"Nuitka\" and \"Nuitka commercial\" are now my day job, and I quit my work in the Air Traffic Community, after working on ARTAS (a software to create an Air Situation Picture from radar and other sensors) for 20 years.</p> <p>Major Milestone</p> <p>This represents a major milestone for the Nuitka project - having dedicated full-time development resources.</p>"},{"location":"news/all-in-with-nuitka/#why-now","title":"Why Now?","text":"<p>That is very good question. I feel I could have done this a long time ago, and my heart was torn for a while, and also I prepared this for a while now. Listening back to interviews from 4 years ago, it seems though as if it had not been on the radar (pun intended).</p> <p>So then I launched Nuitka commercial around 1.5 years ago, first as vapor ware, with early bird customers, and meanwhile it has matured to a point, where it is the obvious solution to many corporate users, with big guys picking it up and small business as well. From startups, big name technology giants, universities, mid sized companies, and from individuals, I have all kinds of support.</p> <p>I liked my old job very much, but it was getting old, and I felt like Nuitka needs me to fulfil my mission. And my wife needed my help with driving her to work, which was getting the load too high, something had to give. And it seems nothing related to what is called Nuitka (my wife, and the compiler share the name) was going to be that.</p>"},{"location":"news/all-in-with-nuitka/#what-will-change","title":"What Will Change?","text":"<p>Already, ever since I launched Nuitka commercial, Nuitka has become way more of an out of the box experience. It just works, and covers more packages than ever before, and steps have been taken, to make it possible to extend this even further with your help. Sure there are still shortcomings.</p> <p>But Nuitka has become very polished, and shows this very much that I also love details and doing things correctly. I have conducted Nuitka from day one as an attempt to create a software that would be usable to the enterprise with a million lines of code, that they cannot check for unsupported language features, so Nuitka is just fully compatible, to a level of absurdity.</p> <p>Having conducted Nuitka on a level of where a corporate business can throw its code at Nuitka and have it just work, and reliably, this will only improve now.</p> <p>Naturally bugs have happened once in a while, but I was always more careful. You know, like if this was for safety critical software, on which lives might depend. Hard to not be affected by that stance.</p> <p>So lets talk about other ways I plan to expand.</p>"},{"location":"news/all-in-with-nuitka/#nuitka-package-configuration","title":"Nuitka Package Configuration","text":"<p>Extending Nuitka with tweaks for packages has become increasingly simpler. Many previous plugins, e.g. for <code>torch</code>, <code>tensorflow</code>, and most recently <code>numpy</code>, and definitely also the Qt binding ones in the future, have been or will be converted to Yaml configuration applied by generic plugins that deal with DLLs, data-files, tweaks (called <code>anti-bloat</code>) etc.</p> <p>Adding stuff there is simple, and as of recently, there is even documentation for it. This is going to be explained in a series of posts detailing Nuitka Package Configuration, under the <code>package_config</code> tag.</p> <p>I must say it's so much fun, I love working with it. But the goal is for this to have you join it, and PRs are indeed starting to come in more frequently it seems from first glance, but I need to make this more known.</p>"},{"location":"news/all-in-with-nuitka/#streaming","title":"Streaming","text":"<p>I have experimented with streaming in the past, and I absolutely love it. Without my day job, effectively working two jobs at the same time, I expect to have the time to do more of them in December and then on a regular basis.</p> <p>Learn More About Streaming</p>"},{"location":"news/all-in-with-nuitka/#python-311","title":"Python 3.11","text":"<p>There will be a separate post on this issue later this week. I am scrambling to add support for it and it feels very far already. Many basic tests already work, but more debugging will be needed. I hope Nuitka 1.3 will add support for it, at least on the usual experimental level.</p>"},{"location":"news/all-in-with-nuitka/#how-you-can-help","title":"How You Can Help?","text":"<p>Please become a subscriber of Nuitka commercial, even if you do not need the IP protection features it mostly has. All essential packaging and performance features are free, and I have put incredible amounts of works in this, and I need to now make a living off it.</p> <p>Right now, I am far from being able to sustain my income from it, and I am taking a risk with this effort, hoping for support from you.</p>"},{"location":"news/all-in-with-nuitka/#what-nuitka-commercial-offers","title":"What Nuitka Commercial Offers","text":"<ul> <li>Windows Service Support: Nuitka commercial makes creating a Windows Service a blast</li> <li>PySide2 Compatibility: It has a PySide2 that is compatible with Nuitka (I did make PySide6 compatible myself, and backported it to PySide2)</li> <li>IP Protection: For those who need to stay on old software, and for IP protection, it is just incredibly important to not ship bytecode at all</li> <li>Runtime Protection: With Nuitka commercial, it protects your data and files at runtime too</li> </ul> <p>Marketing Philosophy</p> <p>I am bad at marketing, but good at software, which is one more reason to purchase it. You know you love these kinds of people. Was that good marketing?</p> <p>Also, there are share buttons on this page. Please try them out and let people know about this.</p> <p>In future postings, I will make it a regular thing to ask for help with some of the technical tasks. Stay tuned, there might be something that you can help with.</p>"},{"location":"news/all-in-with-nuitka/#becoming-more-active","title":"Becoming More Active","text":"<p>I am the kind of person that would much rather do good stuff than to talk about it, like when it finally supports Python 3.11, normal old me would just mention it maybe on Twitter once, and have it in the changelog only.</p> <p>I need to get away from that. I need to resume TWN (This week in Nuitka) and have all plans to do it. Obviously I can get caught up in things, and may just always do it later when there is more or better news.</p> <p>This post marks a significant milestone for the Nuitka project. Your support helps make full-time development possible!</p>"},{"location":"news/nuitka-release-27/","title":"Nuitka Release 2.7","text":"<p>This is a placeholder for the Nuitka 2.7 release announcement.</p>"},{"location":"news/nuitka-release-27/#whats-new","title":"What's New","text":"<ul> <li>Performance improvements</li> <li>Bug fixes</li> <li>New features</li> </ul>"},{"location":"news/nuitka-release-27/#installation","title":"Installation","text":"<pre><code>pip install nuitka==2.7\n</code></pre>"},{"location":"news/nuitka-release-27/#changelog","title":"Changelog","text":"<p>See the full changelog for detailed information.</p>"},{"location":"other/pyqt5-support/","title":"Nuitka PyQt5 Support","text":"<p>Information about PyQt5 compatibility and support in Nuitka.</p> <p>Problematic Support</p> <p>Support for PyQt5 is relatively problematic. Better alternatives are strongly recommended.</p>"},{"location":"other/pyqt5-support/#pyqt5-support-issues","title":"PyQt5 Support Issues","text":"<p>While the <code>pyqt5</code> plugin of Nuitka enables using it, there are known bugs with callbacks and threading. You can workaround them, but they can be very limiting.</p>"},{"location":"other/pyqt5-support/#known-problems","title":"Known Problems","text":"<ul> <li>Callback Issues: Problems with compiled methods as callbacks</li> <li>Threading Bugs: Various threading-related issues</li> <li>Limited Workarounds: Some issues can be worked around, but with significant limitations</li> <li>Maintenance Status: Limited ongoing support for PyQt5-specific issues</li> </ul> <p>Production Risk</p> <p>Using PyQt5 with Nuitka in production environments carries significant risk due to these known limitations.</p>"},{"location":"other/pyqt5-support/#why-pyqt5-has-poor-support","title":"Why PyQt5 Has Poor Support","text":"<p>PyQt5 has several fundamental compatibility issues with Nuitka's compilation approach:</p>"},{"location":"other/pyqt5-support/#technical-challenges","title":"Technical Challenges","text":"<ul> <li>Signal/Slot System: Complications with compiled Python callbacks</li> <li>Object Lifecycle: Issues with Qt object management in compiled code</li> <li>Threading Model: Conflicts between PyQt5's threading and compiled code</li> <li>Memory Management: Reference counting issues in certain scenarios</li> </ul>"},{"location":"other/pyqt5-support/#development-priority","title":"Development Priority","text":"<ul> <li>Legacy Framework: PyQt5 is based on the older Qt5</li> <li>Limited Resources: Development focus has shifted to newer frameworks</li> <li>Community Support: Fewer contributors working on PyQt5 compatibility</li> </ul>"},{"location":"other/pyqt5-support/#recommended-solutions","title":"Recommended Solutions","text":""},{"location":"other/pyqt5-support/#option-1-nuitka-commercial-with-pyside2","title":"Option 1: Nuitka Commercial with PySide2","text":"<p>The patched PySide2 source code and binary wheels for some platforms are available as part of the Nuitka Commercial offering. The PySide2 and PyQt5 are most similar and might be the easiest way out.</p> <p>Benefits of PySide2 (Commercial): - \u2705 Similar API to PyQt5 - \u2705 Properly patched for Nuitka compatibility - \u2705 Professional support available - \u2705 Tested for production use</p> <p>Learn About Commercial PySide2</p>"},{"location":"other/pyqt5-support/#option-2-migrate-to-modern-frameworks","title":"Option 2: Migrate to Modern Frameworks","text":"<p>Otherwise your best bet is to migrate to PyQt6 (which at this time does not support Qt threading with Nuitka) or PySide6 (recommended) and use these, as there are no compatibility issues with these.</p>"},{"location":"other/pyqt5-support/#framework-comparison","title":"Framework Comparison","text":"Framework Nuitka Support Qt Version Recommendation PySide6 \u2705 Excellent Qt6 Highly Recommended PyQt6 \u2705 Good Qt6 Good alternative PySide2 \u26a0\ufe0f Limited/Commercial Qt5 Only with Nuitka Commercial PyQt5 \u274c Poor Qt5 Not Recommended"},{"location":"other/pyqt5-support/#why-pyside6-is-recommended","title":"Why PySide6 is Recommended","text":"<ul> <li>Modern Framework: Based on the latest Qt6</li> <li>Excellent Compatibility: No known major issues with Nuitka</li> <li>Active Development: Ongoing support and improvements</li> <li>Performance: Better performance than Qt5-based frameworks</li> <li>Future-Proof: Long-term support and development</li> </ul>"},{"location":"other/pyqt5-support/#material-migration-migration-strategies","title":":material-migration: Migration Strategies","text":""},{"location":"other/pyqt5-support/#from-pyqt5-to-pyside6","title":"From PyQt5 to PySide6","text":"<p>API Similarities: - Very similar API structure - Most code can be migrated with import changes - Similar signal/slot system - Compatible widget hierarchy</p> <p>Key Migration Steps: 1. Change imports from <code>PyQt5</code> to <code>PySide6</code> 2. Update signal/slot connections (minor syntax differences) 3. Handle Qt6-specific API changes 4. Test thoroughly with Nuitka compilation</p>"},{"location":"other/pyqt5-support/#from-pyqt5-to-pyqt6","title":"From PyQt5 to PyQt6","text":"<p>Considerations: - Same vendor (Riverbank Computing) - Familiar licensing model - Similar API patterns - Note: Some threading limitations with Nuitka</p> <p>Qt6 Migration Resources</p>"},{"location":"other/pyqt5-support/#getting-support","title":"Getting Support","text":""},{"location":"other/pyqt5-support/#for-current-pyqt5-users","title":"For Current PyQt5 Users","text":"<p>If you must continue using PyQt5:</p> <ol> <li>Understand the Risks: Accept that there will be limitations</li> <li>Test Thoroughly: Extensive testing is crucial</li> <li>Avoid Complex Threading: Minimize threading usage</li> <li>Plan Migration: Start planning migration to supported frameworks</li> </ol>"},{"location":"other/pyqt5-support/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Issues - Report specific PyQt5 problems</li> <li>Discord Community - Get help from other users</li> <li>Migration Guides - Official Qt migration documentation</li> </ul>"},{"location":"other/pyqt5-support/#practical-recommendations","title":"Practical Recommendations","text":""},{"location":"other/pyqt5-support/#short-term-solutions","title":"Short-term Solutions","text":"<p>If you're currently using PyQt5 and need immediate solutions:</p> <pre><code># Basic workarounds for some issues\nimport sys\nfrom PyQt5.QtWidgets import QApplication\n\n# Ensure proper signal handling\napp = QApplication(sys.argv)\napp.setAttribute(Qt.AA_X11InitThreads, True)  # For threading issues\n</code></pre>"},{"location":"other/pyqt5-support/#long-term-strategy","title":"Long-term Strategy","text":"<p>Phase 1: Assessment - Audit your current PyQt5 usage - Identify problematic areas (threading, complex callbacks) - Plan migration timeline</p> <p>Phase 2: Migration - Start with PySide6 migration - Update imports and API calls - Test with Nuitka compilation</p> <p>Phase 3: Optimization - Leverage new Qt6 features - Optimize for Nuitka compilation - Implement proper error handling</p>"},{"location":"other/pyqt5-support/#next-steps","title":"Next Steps","text":"<p>Ready to move away from PyQt5? Here are your best options:</p> <ol> <li>Migrate to PySide6 - Best long-term solution</li> <li>Try Nuitka Commercial with PySide2 - Easiest migration path</li> <li>Get Community Help - Support for migration process</li> </ol> <p>Choose Your Migration Path</p> <p>Future-Proof Choice</p> <p>Migrating to PySide6 not only solves current compatibility issues but also ensures your application is built on a modern, actively maintained framework with excellent Nuitka support.</p>"},{"location":"other/pyside2-support/","title":"Nuitka PySide2 Support","text":"<p>Information about PySide2 compatibility and support in Nuitka.</p> <p>Limited Baseline Support</p> <p>Support with baseline PySide2 is only partial. Enhanced support is available through Nuitka Commercial.</p>"},{"location":"other/pyside2-support/#baseline-pyside2-limitations","title":"Baseline PySide2 Limitations","text":"<p>While the <code>pyside2</code> plugin of Nuitka can workaround some issues PySide 5.15.2.1 has to support compiled methods as callbacks, these are far from complete. Some programs work, but many do have problems, especially in reacting to events.</p>"},{"location":"other/pyside2-support/#known-issues","title":"Known Issues","text":"<ul> <li>Callback Methods: Compiled methods as callbacks have incomplete support</li> <li>Event Handling: Many programs have problems reacting to events</li> <li>Threading Issues: Various threading-related complications</li> <li>Partial Functionality: Some features work, but others may fail unexpectedly</li> </ul> <p>Compatibility Status</p> <ul> <li>\u2705 Basic GUI applications may work</li> <li>\u274c Complex event-driven applications often have issues  </li> <li>\u274c Threading applications are problematic</li> <li>\u274c Callback-heavy applications may fail</li> </ul>"},{"location":"other/pyside2-support/#enhanced-support-in-nuitka-commercial","title":"Enhanced Support in Nuitka Commercial","text":"<p>For this, the PySide2 wheels provided by Nuitka Commercial contain a backport of the PySide6 changes made to support compiled code perfectly. The support of PySide6 is much better, but unfortunately not perfect. However, all current known bugs with PySide6 do not affect PySide2 as accessible in Nuitka Commercial.</p>"},{"location":"other/pyside2-support/#whats-included","title":"What's Included","text":"<p>The patched PySide2 source code and binary wheels for some platforms are available as part of the Nuitka Commercial offering.</p> <p>Benefits of Commercial PySide2: - Perfect Compilation Support: Backported PySide6 improvements - Event Handling: Properly working event system - Callback Methods: Full support for compiled methods as callbacks - Stability: Tested and verified for production use</p> <p>Commercial Solution</p> <p>The recommended solution for serious PySide2 development is to use the wheels as provided by Nuitka Commercial. There is no way these patches will be backported to the official PySide2 release.</p>"},{"location":"other/pyside2-support/#why-no-official-backport","title":"Why No Official Backport?","text":"<p>For older PySide2 and just generally, the recommended solution is to use the wheels as provided by Nuitka Commercial. There is no way these patches will be backported and as a result, we have that backported patch that will not get released in any other way. This is very understandable, now that Qt6 is out.</p> <p>The Qt project has moved focus to Qt6/PySide6, making backports to PySide2 unlikely.</p>"},{"location":"other/pyside2-support/#recommended-alternatives","title":"Recommended Alternatives","text":"<p>If Nuitka Commercial is not an option, consider these alternatives:</p>"},{"location":"other/pyside2-support/#migration-to-pyside6","title":"Migration to PySide6","text":"<p>Otherwise your best bet is to migrate to PySide6 which has excellent support for Nuitka.</p> <p>PySide6 Benefits: - \u2705 Excellent Nuitka compatibility - \u2705 Active development and support - \u2705 Modern Qt6 features - \u2705 Better performance - \u2705 Long-term support</p> <p>Learn more about PySide6 migration</p>"},{"location":"other/pyside2-support/#pyqt6-option","title":"PyQt6 Option","text":"<p>Also PyQt6 would work, but PyQt5 unfortunately is very poorly supported.</p> <p>Framework Compatibility: - \u2705 PySide6 - Excellent support (Recommended) - \u2705 PyQt6 - Good support  - \u26a0\ufe0f PySide2 - Limited (Commercial patches available) - \u274c PyQt5 - Poor support</p>"},{"location":"other/pyside2-support/#getting-help","title":"Getting Help","text":""},{"location":"other/pyside2-support/#for-nuitka-commercial-users","title":"For Nuitka Commercial Users","text":"<p>If you're using Nuitka Commercial with PySide2: - Access to patched PySide2 wheels - Priority support for PySide2 issues - Direct access to Kay Hayen for complex problems</p> <p>Purchase Nuitka Commercial</p>"},{"location":"other/pyside2-support/#for-community-users","title":"For Community Users","text":"<p>If you're using the free version: - Consider migrating to PySide6 - Use the <code>pyside2</code> plugin with awareness of limitations - Report issues on GitHub - Join the Discord community for help</p> <p>Get Community Support</p>"},{"location":"other/pyside2-support/#material-migration-migration-guide","title":":material-migration: Migration Guide","text":"<p>Ready to move to PySide6? Here's what you need to know:</p>"},{"location":"other/pyside2-support/#key-changes","title":"Key Changes","text":"<ul> <li>Import statements change from <code>PySide2</code> to <code>PySide6</code></li> <li>Some API changes in Qt6</li> <li>Better performance and modern features</li> <li>Excellent Nuitka compatibility</li> </ul>"},{"location":"other/pyside2-support/#resources","title":"Resources","text":"<ul> <li>Official PySide6 Migration Guide</li> <li>Qt6 Porting Guide</li> <li>Nuitka Package Configuration for PySide6</li> </ul> <p>Migration Support</p> <p>The Nuitka community can help with migration questions. Join our Discord or check the documentation for PySide6-specific guidance.</p>"}]}